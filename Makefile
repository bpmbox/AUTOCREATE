#Sets the default shell for executing commands as /bin/bash and specifies command should be executed in a Bash shell.
SHELL := /bin/bash

# GitHub Configuration (load from .env)
GITHUB_TOKEN := $(shell grep "GITHUB_TOKEN=" .env | cut -d'=' -f2)
GITHUB_USER := $(shell grep "GITHUB_USER=" .env | cut -d'=' -f2)
GITHUB_REPO := $(shell grep "GITHUB_REPO=" .env | cut -d'=' -f2)

# Color codes for terminal output
COLOR_RESET=\033[0m
COLOR_CYAN=\033[1;36m
COLOR_GREEN=\033[1;32m

# Defines the targets help, install, dev-install, and run as phony targets.
.PHONY: help install run dev debug app server test clean requirements ci-test ci-quick ci-full stop-port gui gui-auto gui-stop gui-logs gui-restart gui-simple

#sets the default goal to help when no target is specified on the command line.
.DEFAULT_GOAL := help

#Disables echoing of commands.
.SILENT:

#Sets the variable name to the second word from the MAKECMDGOALS.
name := $(word 2,$(MAKECMDGOALS))

#Defines a target named help.
help:
	@echo "================================================================================"
	@echo "AUTOCREATE AI CEO & Jobless CTO Command System"
	@echo "================================================================================"
	@echo "Usage: make <command>"
	@echo ""
	@echo "TOP COMMANDS (Start Here!):"
	@echo "  chrome-ext             Start AI CEO Chrome extension"
	@echo "  app                    Start main application (port 7860)"
	@echo "  wiki-rag               Start WIKI RAG system"
	@echo "  gui                    Start desktop GUI (port 6080)"
	@echo "  ai-human-bpms          Start AI-Human BPMS system"
	@echo ""	@echo "Chrome Extension:"
	@echo "  chrome-ext             Start Chrome with extension"
	@echo "  chrome-ext-test        Test page + Supabase chat"
	@echo "  chrome-ext-status      Check extension status"
	@echo "  chrome-ext-ai-test     AI response function test"
	@echo "  chrome-ext-xpath-config XPath configuration manager"
	@echo "  chrome-ext-typeerror-test  TypeError fix verification"
	@echo "  chrome-ext-error-status    Current error status"
	@echo ""	@echo "Notion Integration:"
	@echo "  notion-demo            Demo mode (shows what pages would look like)"
	@echo "  notion-test            Test Notion API connection"
	@echo "  notion-sample          Create sample Notion page"
	@echo "  notion-autocreate      Create AUTOCREATE knowledge page"
	@echo "  notion-technical       Create technical documentation"
	@echo "  notion-knowledge-base  Create comprehensive knowledge base (5 pages)"
	@echo "  notion-business-knowledge Create business-oriented knowledge (4 pages)"
	@echo "  notion-knowledge-summary Show knowledge base overview"
	@echo "  notion-workspace       Explore Notion workspace"
	@echo "  notion-diagnostics     Full Notion diagnostics"
	@echo ""	@echo "Resource-First Development:"
	@echo "  resource-first-deploy  üöÄ Deploy both business & developer resources"
	@echo "  create-developer-issue Create GitHub issue with n8n/BPMN/Mermaid"
	@echo ""
	@echo "JIRA Integration:"
	@echo "  jira-test             Test JIRA API connection"
	@echo "  jira-create-tickets   Create AUTOCREATE project tickets"
	@echo "  jira-diagnostics      Full JIRA diagnostics"
	@echo ""
	@echo "Triple Deploy System:"
	@echo "  triple-deploy         üöÄ Notion + GitHub + JIRA complete deployment"
	@echo ""
	@echo "Applications:"
	@echo "  app                    FastAPI application"
	@echo "  dev                    Development mode"
	@echo "  debug                  Debug mode"
	@echo "  stop-port              Stop port 7860"
	@echo ""
	@echo "GUI & Desktop:"
	@echo "  gui                    AI GUI desktop (port 6080)"
	@echo "  gui-simple             Simple GUI (port 6081)"
	@echo ""
	@echo "OCR & RPA:"
	@echo "  ocr-gradio             OCR Gradio interface"
	@echo "  ocr-rpa-demo           RPA automation demo"
	@echo ""
	@echo "WIKI RAG:"
	@echo "  wiki-rag               WIKI RAG system (port 7860)"
	@echo "  wiki-rag-lite          WIKI RAG Lite"
	@echo ""
	@echo "Testing:"
	@echo "  test                   Run all tests"
	@echo "  ci-test                CI/CD tests"
	@echo ""
	@echo "Setup:"
	@echo "  install                Install dependencies"
	@echo "  clean                  Clean temp files"
	@echo ""
	@echo "Quick Start: make chrome-ext  or  make app"
	@echo "================================================================================"
	@echo "  help           	Return this message with usage instructions."
	@echo "  install        	Will install the dependencies using Poetry."
	@echo "  run <folder_name>  Runs GPT Engineer on the folder with the given name."
	@echo "  generated_systems <name>  Generate system using GPT Engineer with prompts"
	@echo "  runs <name>     	Run GPT Engineer system generation"
	@echo "  app            	Run the main FastAPI application (app.py) - auto stops port 7860"
	@echo "  dev            	Run the application in development mode with hot reload - auto stops port 7860"
	@echo "  debug          	Run the application in debug mode (no reload) - auto stops port 7860"
	@echo "  server         	Run the ASGI server directly with uvicorn - auto stops port 7860"	@echo "  gui            	Start AI GUI Desktop Environment (http://localhost:6080)"
	@echo "  gui-auto       	Auto-start GUI with browser launch"
	@echo "  gui-simple     	Start simple GUI environment (http://localhost:6081)"
	@echo "  gui-stop       	Stop GUI Desktop Environment"
	@echo "  gui-restart    	Restart GUI Desktop Environment"
	@echo "  gui-logs       	Show GUI logs"
	@echo "  stop-port      	Stop any process running on port 7860"
	@echo "  ci-test        	Run CI/CD automated tests"
	@echo "  ci-quick       	Run quick CI test (no GitHub Issue)"
	@echo "  ci-full        	Run full CI pipeline with GitHub Issue"
	@echo "  ci-comprehensive	Run comprehensive controller tests"
	@echo "  ci-real-api      	Run real Gradio API tests"
	@echo "  test           	Run all tests"
	@echo "  requirements   	Install Python requirements from requirements.txt"
	@echo "  clean          	Clean up temporary files and caches"
	@echo ""
	@echo "ü§ñ n8n Automation Integration Commands:"
	@echo "  n8n-test       	Test n8n API connection and create AUTOCREATE workflow"
	@echo "  n8n-create     	Create AUTOCREATE AI Solutions workflow in n8n"
	@echo "  n8n-trigger    	Test workflow execution with sample data"
	@echo ""
	@echo "üè¢ AI-Human Collaboration Company Commands:"
	@echo "  gitflow-setup   	Initialize GitFlow collaboration system"
	@echo "  feature-start   	Start new feature development (usage: make feature-start name=feature-name)"
	@echo "  feature-finish  	Finish feature development (usage: make feature-finish name=feature-name)"
	@echo "  collab-commit   	Make collaboration commit (usage: make collab-commit message='commit message')"
	@echo ""
	@echo "ü§ñ OCR RPA Automation Commands:"
	@echo "  ocr-rpa-demo    	Run OCR RPA automation demo (kinkaimasu.jp)"
	@echo "  ocr-rpa-config  	Edit OCR RPA configuration"
	@echo "  ocr-rpa-report  	Generate latest automation report"
	@echo "  ocr-rpa-clean   	Clean OCR RPA temporary files"
	@echo "  vnc-auto        	Run VNC desktop automation demo"
	@echo "  jupyter-ocr     	Launch Jupyter notebook for OCR RPA demo"
	@echo ""
	@echo "üîÑ n8n Workflow Automation Commands:"
	@echo "  n8n-setup       	Setup n8n workflow integration"
	@echo "  n8n-test        	Test n8n API connection"
	@echo "  n8n-create      	Create AUTOCREATE AI workflow in n8n"
	@echo "  n8n-list        	List all n8n workflows"
	@echo "  n8n-webhook     	Get webhook URL for n8n integration"
	@echo ""
	@echo "üìö WIKI RAG System Commands:"
	@echo "  wiki-rag        	Start WIKI RAG system with Gradio UI"
	@echo "  wiki-rag-cli    	Use WIKI RAG CLI for command line queries"
	@echo "  wiki-rag-build  	Build/rebuild WIKI RAG knowledge base"
	@echo "  wiki-rag-install	Install WIKI RAG dependencies"
	@echo "  wiki-rag-lite   	Start WIKI RAG lite system (no auth required)"
	@echo "  wiki-rag-lite-cli	Use WIKI RAG lite CLI for command line queries"
	@echo "  wiki-rag-chat   	Start WIKI RAG Chat interface (conversational AI)"
	@echo ""
	@echo "üõ°Ô∏è  Safe Integration Testing Commands:"
	@echo "  safe-test      	Run safe integration tests (dry-run mode)"
	@echo "  config-check   	Check environment configuration safely"
	@echo "  integration-status	Show all integration service status"
	@echo "  dry-run-all    	Test all integrations without executing"
	@echo ""
	@echo "üß† AI-Human BPMS Assistant Commands:"
	@echo "  ai-human-bpms   	Run AI-Human BPMS Assistant demonstration"
	@echo "  bpms-analyze    	Analyze human cognitive capacity and workflow needs"
	@echo "  bpms-optimize   	Generate optimized human-friendly workflows"
	@echo "  bpms-monitor    	Monitor human-AI collaboration effectiveness"
	@echo "  cognitive-check 	Check human cognitive load and suggest breaks"
	@echo ""
	@echo "üìù GitHub Issue Management Commands:"
	@echo "  create-github-issue	Create GitHub Issue for AI-Human BPMS Assistant"
	@echo "  github-issue-ai-bpms	Create AI-Human BPMS specific GitHub Issue"
	@echo "  github-issue-status	Check GitHub repository and issue creation status"
	@echo ""

#Defines a target named install. This target will install the project using Poetry.
install: poetry-install install-pre-commit farewell

#Defines a target named poetry-install. This target will install the project dependencies using Poetry.
poetry-install:
	@echo -e "$(COLOR_CYAN)Installing project with Poetry...$(COLOR_RESET)" && \
	poetry install

#Defines a target named install-pre-commit. This target will install the pre-commit hooks.
install-pre-commit:
	export OPENAI_API_BASE="https://api.groq.com/openai/v1/chat/completions"
	export OPENAI_API_KEY="sk-key-from-open-router"
	export MODEL_NAME="meta-llama/llama-3-8b-instruct:extended"
	export LOCAL_MODEL=true
	@echo -e "$(COLOR_CYAN)Installing pre-commit hooks...$(COLOR_RESET)" && \
	poetry run pre-commit install

#Defines a target named farewell. This target will print a farewell message.
farewell:
	@echo -e "$(COLOR_GREEN)All done!$(COLOR_RESET)"

#Defines a target named run. This target will run GPT Engineer on the folder with the given name.


run:
	@echo -e "$(COLOR_CYAN)Running Lavelo AI Automation Test...$(COLOR_RESET)" && \
	python lavelo_automation_test.py --mode=full_test

runbabyagi:
	cd ./babyagi && python babyagi.py $(name)

install:
	@echo -e "$(COLOR_CYAN)Installing dependencies...$(COLOR_RESET)"
	pip install -r requirements.txt


# Counts the lines of code in the project
cloc:
	cloc . --exclude-dir=node_modules,dist,build,.mypy_cache,benchmark --exclude-list-file=.gitignore --fullpath --not-match-d='docs/_build' --by-file

ssh:
	ssh-keygen -t rsa -b 4096 \-f ~/.ssh/id_rsa_new

# Application commands
stop-port:
	@echo -e "$(COLOR_CYAN)Stopping processes on port 7860...$(COLOR_RESET)"
	@if lsof -ti:7860 > /dev/null 2>&1; then \
		echo -e "$(COLOR_CYAN)Found process on port 7860, stopping...$(COLOR_RESET)"; \
		kill -9 $$(lsof -ti:7860) 2>/dev/null || true; \
		sleep 2; \
	else \
		echo -e "$(COLOR_GREEN)No process found on port 7860$(COLOR_RESET)"; \
	fi

app: stop-port
	@echo -e "$(COLOR_CYAN)Starting FastAPI application...$(COLOR_RESET)"
	SPACE_ID="" python app.py

dev: stop-port
	@echo -e "$(COLOR_CYAN)Starting application in development mode...$(COLOR_RESET)"
	SPACE_ID="" python app.py

debug: stop-port
	@echo -e "$(COLOR_CYAN)Starting application in debug mode...$(COLOR_RESET)"
	SPACE_ID="" python app.py --debug

server: stop-port
	@echo -e "$(COLOR_CYAN)Starting ASGI server directly...$(COLOR_RESET)"
	uvicorn mysite.asgi:app --host 0.0.0.0 --port 7860 --reload

# Requirements and dependencies
requirements:
	@echo -e "$(COLOR_CYAN)Installing Python requirements...$(COLOR_RESET)"
	pip install -r requirements.txt

# Testing
test:
	@echo -e "$(COLOR_CYAN)Running tests...$(COLOR_RESET)"
	python -m pytest tests/ -v

# Utility commands
clean:
	@echo -e "$(COLOR_CYAN)Cleaning up temporary files...$(COLOR_RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache/
	rm -rf build/
	rm -rf dist/

# Database commands
migrate:
	@echo -e "$(COLOR_CYAN)Running database migrations...$(COLOR_RESET)"
	python manage.py migrate

makemigrations:
	@echo -e "$(COLOR_CYAN)Creating database migrations...$(COLOR_RESET)"
	python manage.py makemigrations

# Docker commands
docker-build:
	@echo -e "$(COLOR_CYAN)Building Docker image...$(COLOR_RESET)"
	docker-compose build

docker-up:
	@echo -e "$(COLOR_CYAN)Starting Docker containers...$(COLOR_RESET)"
	docker-compose up -d

docker-down:
	@echo -e "$(COLOR_CYAN)Stopping Docker containers...$(COLOR_RESET)"
	docker-compose down

# GUI commands
gui:
	@echo -e "$(COLOR_CYAN)Starting AI GUI Desktop Environment...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)GUI will be available at: http://localhost:6080$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)VNC direct access: localhost:5901$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)Default credentials: copilot/copilot$(COLOR_RESET)"
	docker-compose -f docker-ai-gui-desktop.yml up -d

gui-auto:
	@echo -e "$(COLOR_CYAN)Auto-starting GUI with browser launch...$(COLOR_RESET)"
	./scripts/start_gui_auto.sh

gui-stop:
	@echo -e "$(COLOR_CYAN)Stopping GUI Desktop Environment...$(COLOR_RESET)"
	docker-compose -f docker-ai-gui-desktop.yml down

gui-logs:
	@echo -e "$(COLOR_CYAN)Showing GUI logs...$(COLOR_RESET)"
	docker-compose -f docker-ai-gui-desktop.yml logs -f

gui-restart:
	@echo -e "$(COLOR_CYAN)Restarting GUI Desktop Environment...$(COLOR_RESET)"
	docker-compose -f docker-ai-gui-desktop.yml restart

gui-simple:
	@echo -e "$(COLOR_CYAN)Starting simple GUI environment...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)GUI will be available at: http://localhost:6081$(COLOR_RESET)"
	docker-compose -f docker-compose-gui.yml up -d

# CI/CD commands
ci-test:
	@echo -e "$(COLOR_CYAN)Running CI/CD automated tests...$(COLOR_RESET)"
	chmod +x quick_ci_test.sh
	./quick_ci_test.sh

ci-quick:
	@echo -e "$(COLOR_CYAN)Running quick CI test (no GitHub Issue)...$(COLOR_RESET)"
	python3 run_complete_ci_pipeline.py --no-github-issue

ci-full:
	@echo -e "$(COLOR_CYAN)Running full CI pipeline with GitHub Issue...$(COLOR_RESET)"
	python3 run_complete_ci_pipeline.py

ci-verbose:
	@echo -e "$(COLOR_CYAN)Running CI pipeline with verbose output...$(COLOR_RESET)"
	python3 run_complete_ci_pipeline.py --verbose

ci-comprehensive:
	@echo -e "$(COLOR_CYAN)Running comprehensive controller tests...$(COLOR_RESET)"
	python3 comprehensive_controller_test.py

ci-comprehensive-issue:
	@echo -e "$(COLOR_CYAN)Running comprehensive tests with GitHub Issue...$(COLOR_RESET)"
	python3 run_complete_ci_pipeline.py --comprehensive

ci-real-api:
	@echo -e "$(COLOR_CYAN)Running real Gradio API tests...$(COLOR_RESET)"
	python3 real_gradio_api_tester.py

ci-all:
	@echo -e "$(COLOR_CYAN)Running all tests (comprehensive + real API + GitHub Issues)...$(COLOR_RESET)"
	python3 run_complete_ci_pipeline.py

# üè¢ AI-Human Collaboration Company Commands
.PHONY: gitflow-setup feature-start feature-finish collab-commit collab-status

gitflow-setup:
	@echo -e "$(COLOR_CYAN)GitFlowÂçîÂÉçÈñãÁô∫„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ...$(COLOR_RESET)"
	@chmod +x scripts/setup-gitflow-collaboration.sh
	@./scripts/setup-gitflow-collaboration.sh

feature-start:
	@if [ -z "$(name)" ]; then \
		echo -e "$(COLOR_CYAN)‰ΩøÁî®ÊñπÊ≥ï: make feature-start name=Ê©üËÉΩÂêç$(COLOR_RESET)"; \
		echo -e "$(COLOR_CYAN)‰æã: make feature-start name=ai-chat-enhancement$(COLOR_RESET)"; \
		exit 1; \
	fi
	@echo -e "$(COLOR_CYAN)Êñ∞Ê©üËÉΩÈñãÁô∫ÈñãÂßã: $(name)$(COLOR_RESET)"
	@git flow feature start $(name)
	@echo -e "$(COLOR_GREEN)Feature branch 'feature/$(name)' ‰ΩúÊàêÂÆå‰∫Ü$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)ÂçîÂÉçÈñãÁô∫„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ$(COLOR_RESET)"

feature-finish:
	@if [ -z "$(name)" ]; then \
		echo -e "$(COLOR_CYAN)‰ΩøÁî®ÊñπÊ≥ï: make feature-finish name=Ê©üËÉΩÂêç$(COLOR_RESET)"; \
		echo -e "$(COLOR_CYAN)‰æã: make feature-finish name=ai-chat-enhancement$(COLOR_RESET)"; \
		exit 1; \
	fi
	@echo -e "$(COLOR_CYAN)Ê©üËÉΩÈñãÁô∫ÂÆå‰∫Ü: $(name)$(COLOR_RESET)"
	@git flow feature finish $(name)
	@echo -e "$(COLOR_GREEN)Feature branch 'feature/$(name)' „Éû„Éº„Ç∏ÂÆå‰∫Ü$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)WikiÊñáÊõ∏Âåñ„ÇíÂøò„Çå„Åö„Å´ÔºÅ$(COLOR_RESET)"

collab-commit:
	@if [ -z "$(message)" ]; then \
		echo -e "$(COLOR_CYAN)‰ΩøÁî®ÊñπÊ≥ï: make collab-commit message='„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏'$(COLOR_RESET)"; \
		echo -e "$(COLOR_CYAN)‰æã: make collab-commit message='AI„ÉÅ„É£„ÉÉ„ÉàÊ©üËÉΩÊîπÂñÑ'$(COLOR_RESET)"; \
		exit 1; \
	fi
	@echo -e "$(COLOR_CYAN)ÂçîÂÉçÈñãÁô∫„Ç≥„Éü„ÉÉ„ÉàÂÆüË°å...$(COLOR_RESET)"
	@git add .
	@git commit -m "ai-collab: $(message)"
	@echo -e "$(COLOR_GREEN)ÂçîÂÉçÈñãÁô∫„Ç≥„Éü„ÉÉ„ÉàÂÆå‰∫Ü: $(message)$(COLOR_RESET)"

collab-status:
	@echo -e "$(COLOR_CYAN)ÂçîÂÉçÈñãÁô∫Áä∂Ê≥ÅÁ¢∫Ë™ç...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)Current branch:$(COLOR_RESET) $$(git branch --show-current)"
	@echo -e "$(COLOR_GREEN)Recent commits:$(COLOR_RESET)"
	@git log --oneline -5
	@echo -e "$(COLOR_GREEN)Pending changes:$(COLOR_RESET)"
	@git status --short
	@echo -e "$(COLOR_GREEN)GitFlow features:$(COLOR_RESET)"
	@git branch | grep feature/ || echo "  No active feature branches"

# üìã GitHub IssueÁîüÊàê„Ç≥„Éû„É≥„Éâ
generate-issues:
	@echo "üöÄ Êà¶Áï•ÁöÑ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ ‚Üí GitHub Issues ÁîüÊàê‰∏≠..."
	@python scripts/generate_strategic_issues.py
	@echo "‚úÖ IssuesÁîüÊàêÂÆå‰∫Ü"
	@echo "üìä GitHub Issues: https://github.com/$(GITHUB_USER)/AUTOCREATE/issues"

close-completed-issues:
	@echo "‚úÖ ÂÆå‰∫ÜÊ∏à„ÅøIssue„ÅÆ„ÇØ„É≠„Éº„Ç∫Âá¶ÁêÜ"
	@echo "Phase 1ÂÆå‰∫ÜIssues (#001-#005) „Çí„ÇØ„É≠„Éº„Ç∫„Åó„Åæ„Åô"

# ü§ñ AI Vision & OCR Commands
ocr-install:
	@echo "üì¶ OCRÂàÜÊûêÁî®„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
	@pip install -r requirements_ocr.txt
	@echo "‚úÖ OCR‰æùÂ≠òÈñ¢‰øÇ„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"

ocr-gradio:
	@$(MAKE) stop-port
	@echo "üöÄ AUTOCREATE OCR GradioËµ∑Âãï‰∏≠..."
	@echo "üèõÔ∏è AIÁ§æÈï∑√óÁÑ°ËÅ∑CTO‰ΩìÂà∂„Å´„Çà„ÇãÁîªÂÉèËß£Êûê„Ç∑„Çπ„ÉÜ„É†"
	@python gradio_ocr_analyzer.py

gas-login:
	@echo "üîê Google Apps Script CLIË™çË®º"
	@clasp login

gas-push:
	@echo "üì§ GAS OCR API „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠..."
	@cd gas-ocr-api && clasp push
	@echo "‚úÖ GAS API „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü"
	@echo "üîó Web App URL„ÇíÂèñÂæó„Åó„Å¶Gradio„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ"

screenshot-ocr:
	@echo "üì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÊíÆÂΩ± ‚Üí OCRËß£Êûê"
	@docker exec ubuntu-desktop-vnc bash -c "DISPLAY=:1 scrot /tmp/auto_screenshot_$$(date +%Y%m%d_%H%M%S).png"
	@echo "üîç ÊíÆÂΩ±ÂÆå‰∫Ü - Gradio„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶Ëß£Êûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ"

# OCR„Éë„Ç§„Éó„É©„Ç§„É≥ÂÖ®‰Ωì„ÉÜ„Çπ„Éà
ocr-pipeline:
	@echo "üöÄ OCRÂàÜÊûê„Éë„Ç§„Éó„É©„Ç§„É≥ÂÖ®‰Ωì„ÉÜ„Çπ„Éà"
	@$(MAKE) screenshot-ocr

# ü§ñ OCR RPA Automation Commands
ocr-rpa-demo:
	@echo "üöÄ AUTOCREATE OCR RPAËá™ÂãïÂåñ„Éá„É¢ÈñãÂßã"
	@echo "üèõÔ∏è AIÁ§æÈï∑√óÁÑ°ËÅ∑CTO‰ΩìÂà∂„Å´„Çà„ÇãÁü•ÁöÑËá™ÂãïÂåñ"
	@mkdir -p screenshots reports
	@python scripts/ocr_rpa_automation.py
	@echo "‚úÖ OCR RPA „Éá„É¢ÂÆå‰∫Ü"

ocr-rpa-config:
	@echo "‚öôÔ∏è OCR RPAË®≠ÂÆö„Ç®„Éá„Ç£„Çø"
	@if [ ! -f config/ocr_rpa_config.json ]; then \
		echo "‚ùå Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
		echo "üìÅ config/ocr_rpa_config.json „Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ"; \
	else \
		echo "üìù Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÈñã„Åç„Åæ„Åô..."; \
		nano config/ocr_rpa_config.json; \
	fi

ocr-rpa-report:
	@echo "üìã ÊúÄÊñ∞„ÅÆOCR RPAËá™ÂãïÂåñ„É¨„Éù„Éº„Éà"
	@if [ -d reports ]; then \
		echo "üìä Âà©Áî®ÂèØËÉΩ„Å™„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´:"; \
		ls -la reports/*.json 2>/dev/null | tail -5 || echo "‚ùå „É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
		echo ""; \
		echo "ÊúÄÊñ∞„É¨„Éù„Éº„Éà„ÅÆÂÜÖÂÆπ:"; \
		ls -t reports/*.json 2>/dev/null | head -1 | xargs cat 2>/dev/null | jq '.metadata, .technical_results, .business_value' 2>/dev/null || echo "‚ùå ÊúâÂäπ„Å™JSON„É¨„Éù„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
	else \
		echo "‚ùå reports„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
		echo "üí° make ocr-rpa-demo „ÇíÂÖà„Å´ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"; \
	fi

ocr-rpa-clean:
	@echo "üßπ OCR RPA‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó"
	@rm -rf screenshots/*.png reports/*.json
	@echo "‚úÖ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Å®„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åó„Åæ„Åó„Åü"

vnc-auto:
	@echo "üñ•Ô∏è VNC„Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóËá™ÂãïÊìç‰Ωú„Éá„É¢"
	@echo "üèõÔ∏è AIÁ§æÈï∑√óÁÑ°ËÅ∑CTO‰ΩìÂà∂„Å´„Çà„Çã„Éï„É´Ëá™ÂãïÂåñ"
	@python scripts/vnc_desktop_automation.py
	@echo "‚úÖ VNCËá™ÂãïÊìç‰Ωú„Éá„É¢ÂÆå‰∫Ü"

jupyter-ocr:
	@echo "üìì Jupyter OCR RPA „Éá„É¢„Éé„Éº„Éà„Éñ„ÉÉ„ÇØËµ∑Âãï"
	@echo "üèõÔ∏è Ë™∞„Åß„ÇÇ‰Ωø„Åà„ÇãAIËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†"
	@jupyter lab AUTOCREATE_OCR_RPA_Demo.ipynb --ip=0.0.0.0 --port=8889 --no-browser --allow-root
	@echo "üåê „Ç¢„ÇØ„Çª„Çπ: http://localhost:8889"

screenshots-view:
	@echo "üì∏ ÂèéÈõÜÊ∏à„Åø„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰∏ÄË¶ß"
	@if [ -d screenshots ]; then \
		echo "üìä „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Éï„Ç°„Ç§„É´:"; \
		ls -la screenshots/*.png 2>/dev/null || echo "‚ùå „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
		echo ""; \
		echo "üí° ÊúÄÊñ∞„ÅÆ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà:"; \
		ls -t screenshots/*.png 2>/dev/null | head -1 | xargs file 2>/dev/null || echo "„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì"; \
	else \
		echo "‚ùå screenshots„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; \
		echo "üí° make vnc-auto „Åæ„Åü„ÅØ make ocr-rpa-demo „ÇíÂÖà„Å´ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"; \
	fi

# OCR + RPA Ëá™ÂãïÂåñÈñ¢ÈÄ£„Ç≥„Éû„É≥„Éâ
.PHONY: ocr-rpa-loop ocr-rpa-test notebook-demo

ocr-rpa-loop: ## OCR + RPA Ëá™ÂãïÂåñ„É´„Éº„Éó„ÇíÂÆüË°å
	@echo "üöÄ OCR + RPA Ëá™ÂãïÂåñ„É´„Éº„ÉóÂÆüË°å‰∏≠..."
	python scripts/ocr_rpa_automation_loop.py

ocr-rpa-test: ## OCR + RPA „Ç∑„Çπ„ÉÜ„É†„Çí„ÉÜ„Çπ„Éà
	@echo "üß™ OCR + RPA „Ç∑„Çπ„ÉÜ„É†„ÉÜ„Çπ„Éà‰∏≠..."
	python ocr_rpa_test.py

notebook-demo: ## Jupyter Notebook „Éá„É¢„ÇíËµ∑Âãï
	@echo "üì± Jupyter Notebook „Éá„É¢Ëµ∑Âãï‰∏≠..."
	jupyter notebook AUTOCREATE_AI_Vision_Automation_Complete_Guide.ipynb

notebook-colab: ## Google Colab Áî®„ÅÆ„Éé„Éº„Éà„Éñ„ÉÉ„ÇØÊÉÖÂ†±„ÇíË°®Á§∫
	@echo "üåê Google Colab „Åß„ÅÆ„Éé„Éº„Éà„Éñ„ÉÉ„ÇØ‰ΩøÁî®ÊñπÊ≥ï:"
	@echo "1. ‰ª•‰∏ã„ÅÆURL„Å´„Ç¢„ÇØ„Çª„Çπ:"
	@echo "   https://colab.research.google.com/"
	@echo "2. GitHub„Åã„Çâ„Éé„Éº„Éà„Éñ„ÉÉ„ÇØ„Çí„Ç§„É≥„Éù„Éº„Éà:"
	@echo "   AUTOCREATE_AI_Vision_Automation_Complete_Guide.ipynb"
	@echo "3. '„É©„É≥„Çø„Ç§„É†' ‚Üí '„Åô„Åπ„Å¶„ÅÆ„Çª„É´„ÇíÂÆüË°å' „Çí„ÇØ„É™„ÉÉ„ÇØ"

hybrid-ocr: ## „Éè„Ç§„Éñ„É™„ÉÉ„ÉâOCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å
	@echo "üîß „Éè„Ç§„Éñ„É™„ÉÉ„ÉâOCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å‰∏≠..."
	python scripts/hybrid_ocr_analyzer.py

local-ocr: ## „É≠„Éº„Ç´„É´OCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å
	@echo "üè† „É≠„Éº„Ç´„É´OCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å‰∏≠..."
	python scripts/local_ocr_analyzer.py

gas-status: ## GAS OCR API„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
	@echo "üì° GAS OCR APIÁä∂ÊÖãÁ¢∫Ë™ç‰∏≠..."
	@python -c "import requests; r=requests.get('https://script.google.com/macros/s/1ISqaty-oD30b559LXJ5q6dkXYp1H888dxP4uSjK9osgDUm6wDm9rUOOz/exec', timeout=10); print(f'Status: {r.status_code}, Response: {r.text[:100]}...')" || echo "‚ùå GAS APIÊé•Á∂öÂ§±Êïó"

ocr-demo: ## OCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÖ®Ëà¨„Éá„É¢
	@echo "üé≠ OCRËß£Êûê„Ç∑„Çπ„ÉÜ„É†ÂÖ®Ëà¨„Éá„É¢ÂÆüË°å‰∏≠..."
	@echo "1. „Éè„Ç§„Éñ„É™„ÉÉ„ÉâOCRËß£Êûê:"
	@python scripts/hybrid_ocr_analyzer.py
	@echo "\n2. Ëá™ÂãïÂåñ„É´„Éº„Éó„ÉÜ„Çπ„Éà:"
	@python scripts/ocr_rpa_automation_loop.py

# GitHub Issue„ÉªProjectÁÆ°ÁêÜ
.PHONY: issues create-issue list-issues project-status

issues: ## Issue‰∏ÄË¶ß„ÇíË°®Á§∫
	@echo "üìã AUTOCREATE „Éó„É≠„Ç∏„Çß„ÇØ„Éà Issue‰∏ÄË¶ß:"
	@gh issue list --label "task,ai-ceo,cto-jobless,ocr-rpa,kinkaimasu"

create-issue: ## Êñ∞„Åó„ÅÑIssue„Çí‰ΩúÊàêÔºàÂØæË©±ÂºèÔºâ
	@echo "üìù Êñ∞„Åó„ÅÑIssue‰ΩúÊàê:"
	@gh issue create

list-issues: ## „É©„Éô„É´Âà•Issue‰∏ÄË¶ß
	@echo "üèõÔ∏è AIÁ§æÈï∑Èñ¢ÈÄ£Issue:"
	@gh issue list --label "ai-ceo" || echo "„Å™„Åó"
	@echo "\nüîß ÁÑ°ËÅ∑CTOÈñ¢ÈÄ£Issue:"  
	@gh issue list --label "cto-jobless" || echo "„Å™„Åó"
	@echo "\nüè™ kinkaimasu.jpÊ°à‰ª∂:"
	@gh issue list --label "kinkaimasu" || echo "„Å™„Åó"
	@echo "\nü§ñ OCR+RPAÈñ¢ÈÄ£:"
	@gh issue list --label "ocr-rpa" || echo "„Å™„Åó"

project-status: ## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÖ®‰ΩìÁä∂Ê≥ÅÁ¢∫Ë™ç
	@echo "üöÄ AUTOCREATE „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥Å:"
	@echo "üìä Á∑èIssueÊï∞: $$(gh issue list --json number | jq '. | length')"
	@echo "üî• È´òÂÑ™ÂÖàÂ∫¶Issue: $$(gh issue list --label 'priority:high' --json number | jq '. | length')"
	@echo "‚úÖ ÂÆå‰∫ÜIssue: $$(gh issue list --state closed --json number | jq '. | length')"
	@echo "üèõÔ∏è AIÁ§æÈï∑ÊãÖÂΩì: $$(gh issue list --label 'ai-ceo' --json number | jq '. | length')"
	@echo "üîß ÁÑ°ËÅ∑CTOÊãÖÂΩì: $$(gh issue list --label 'cto-jobless' --json number | jq '. | length')"

github-setup: ## GitHubË®≠ÂÆöÁ¢∫Ë™ç„ÉªÂàùÊúüË®≠ÂÆö
	@echo "‚öôÔ∏è GitHubË®≠ÂÆöÁä∂Ê≥Å:"
	@gh auth status
	@echo "\nüìã „É©„Éô„É´‰∏ÄË¶ß:"
	@gh label list || echo "„É©„Éô„É´ÂèñÂæó„Ç®„É©„Éº"
	@echo "\nüìä „É™„É¢„Éº„ÉàË®≠ÂÆö:"
	@git remote -v

selector-install: ## „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†Áî®„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´
	@echo "üì¶ „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†Áî®„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
	pip install -r requirements_selector.txt
	@echo "‚úÖ „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†Áî®„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"

selector-analyze: ## „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†„Åßkinkaimasu.jpÂàÜÊûê
	@echo "üéØ „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å‰∏≠..."
	python scripts/selector_analyzer.py

selector-demo: ## „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†„Éá„É¢ÔºàSelenium‰ΩøÁî®Ôºâ
	@echo "üöÄ „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†„Éá„É¢ÂÆüË°å..."
	@echo "Ê≥®ÊÑè: Chrome/Chromium„ÅåÂøÖË¶Å„Åß„Åô"
	python scripts/selector_analyzer.py

smart-automation: ## „Çπ„Éû„Éº„ÉàËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†ÔºàOCR + „Çª„É¨„ÇØ„Çø„ÉºÁµ±ÂêàÔºâ
	@echo "üß† „Çπ„Éû„Éº„ÉàËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å‰∏≠..."
	@echo "1. „Éè„Ç§„Éñ„É™„ÉÉ„ÉâOCRËß£Êûê:"
	@python scripts/hybrid_ocr_analyzer.py
	@echo "\n2. „Çª„É¨„ÇØ„Çø„ÉºÂàÜÊûê:"
	@python scripts/selector_analyzer.py
	@echo "\n‚úÖ „Çπ„Éû„Éº„ÉàËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†ÂÆå‰∫Ü"

# =============================================================================
# ü§ñ WIKI RAG System Commands
# =============================================================================

.PHONY: wiki-rag wiki-rag-cli wiki-rag-build wiki-rag-install

wiki-rag-install: ## Install WIKI RAG system dependencies
	@echo -e "$(COLOR_CYAN)Installing WIKI RAG dependencies...$(COLOR_RESET)"
	pip install -r requirements_wiki_rag.txt
	@echo -e "$(COLOR_GREEN)‚úÖ WIKI RAG dependencies installed!$(COLOR_RESET)"

wiki-rag-build: ## Build/rebuild WIKI RAG knowledge base
	@echo -e "$(COLOR_CYAN)Building WIKI RAG knowledge base...$(COLOR_RESET)"
	python scripts/wiki_rag_cli.py build --force
	@echo -e "$(COLOR_GREEN)‚úÖ WIKI RAG knowledge base built!$(COLOR_RESET)"

wiki-rag: stop-port wiki-rag-install ## Start WIKI RAG system with Gradio UI
	@echo -e "$(COLOR_CYAN)Starting WIKI RAG system...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)üåê Gradio interface will be available at: http://localhost:7860$(COLOR_RESET)"
	python scripts/wiki_rag_system.py

wiki-rag-cli: wiki-rag-install ## Use WIKI RAG CLI for command line queries
	@echo -e "$(COLOR_CYAN)WIKI RAG CLI Usage:$(COLOR_RESET)"
	@echo -e "  $(COLOR_GREEN)Query:$(COLOR_RESET) python scripts/wiki_rag_cli.py query 'your question'"
	@echo -e "  $(COLOR_GREEN)Search:$(COLOR_RESET) python scripts/wiki_rag_cli.py search 'keyword'"  
	@echo -e "  $(COLOR_GREEN)Stats:$(COLOR_RESET) python scripts/wiki_rag_cli.py stats"
	@echo -e "  $(COLOR_GREEN)Build:$(COLOR_RESET) python scripts/wiki_rag_cli.py build"
	@echo ""
	@echo -e "$(COLOR_CYAN)Example usage:$(COLOR_RESET)"
	@echo -e "  python scripts/wiki_rag_cli.py query 'Gradio„ÅÆ‰Ωø„ÅÑÊñπ„ÅØÔºü'"

wiki-rag-lite: stop-port ## Start WIKI RAG lite system (no HuggingFace auth required)
	@echo -e "$(COLOR_CYAN)Starting WIKI RAG Lite system...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)üåê Gradio interface will be available at: http://localhost:7860$(COLOR_RESET)"
	python scripts/wiki_rag_lite.py

wiki-rag-lite-cli: ## Use WIKI RAG Lite CLI for command line queries
	@echo -e "$(COLOR_CYAN)WIKI RAG Lite CLI Usage:$(COLOR_RESET)"
	@echo -e "  $(COLOR_GREEN)Query:$(COLOR_RESET) python scripts/wiki_rag_lite_cli.py query 'your question'"
	@echo -e "  $(COLOR_GREEN)Search:$(COLOR_RESET) python scripts/wiki_rag_lite_cli.py search 'keyword'"  
	@echo -e "  $(COLOR_GREEN)Stats:$(COLOR_RESET) python scripts/wiki_rag_lite_cli.py stats"
	@echo -e "  $(COLOR_GREEN)Build:$(COLOR_RESET) python scripts/wiki_rag_lite_cli.py build"
	@echo ""
	@echo -e "$(COLOR_CYAN)Example usage:$(COLOR_RESET)"
	@echo -e "  python scripts/wiki_rag_lite_cli.py query 'Gradio„ÅÆ‰Ωø„ÅÑÊñπ„ÅØÔºü'"

wiki-rag-chat: stop-port ## Start WIKI RAG Chat interface (conversational AI)
	@echo -e "$(COLOR_CYAN)Starting WIKI RAG Chat system...$(COLOR_RESET)"
	@echo -e "$(COLOR_GREEN)ü§ñ Chat interface will be available at: http://localhost:7860$(COLOR_RESET)"
	python scripts/wiki_rag_chat.py

notion-knowledge-base:
	@echo "üìö Creating comprehensive AUTOCREATE knowledge base..."
	node notion_knowledge_creator.js

notion-knowledge-summary:
	@echo "üìä AUTOCREATE Knowledge Base Summary"
	@echo "===================================="
	@echo "üéØ System Overview"
	@echo "üîß Notion API Integration Guide"  
	@echo "üåê Chrome Extension Automation"
	@echo "üöÄ Makefile Commands Reference"
	@echo "üí° FAQ & Troubleshooting"
	@echo ""
	@echo "Use 'make notion-knowledge-base' to create all knowledge pages"

notion-business-knowledge:
	@echo "üè¢ Ê•≠ÂãôÂêë„Åë„Éä„É¨„ÉÉ„Ç∏„Éô„Éº„Çπ‰ΩúÊàê..."
	node notion_business_knowledge.js

create-developer-issue:
	@echo "üë®‚Äçüíª ÈñãÁô∫ËÄÖÂêë„ÅëGitHub Issue‰ΩúÊàê..."
	python3 create_developer_issue.py

resource-first-deploy:
	@echo "üìö Ë≥áÊñô„Éï„Ç°„Éº„Çπ„ÉàÂ±ïÈñã„Ç∑„Çπ„ÉÜ„É†"
	@echo "================================"
	@echo "1. Ê•≠ÂãôÂêë„Åë„Éä„É¨„ÉÉ„Ç∏ÔºàNotionÔºâ‰ΩúÊàê‰∏≠..."
	make notion-business-knowledge
	@echo ""
	@echo "2. ÈñãÁô∫ËÄÖÂêë„Åë‰ªïÊßòÊõ∏ÔºàGitHub IssueÔºâ‰ΩúÊàê‰∏≠..."
	make create-developer-issue
	@echo ""
	@echo "üéâ Ë≥áÊñô„Éï„Ç°„Éº„Çπ„ÉàÂ±ïÈñãÂÆå‰∫ÜÔºÅ"
	@echo "üìä Ê•≠Âãô„ÉÅ„Éº„É† ‚Üí Notion„Éä„É¨„ÉÉ„Ç∏„Éô„Éº„Çπ"
	@echo "üë®‚Äçüíª ÈñãÁô∫„ÉÅ„Éº„É† ‚Üí GitHub Issue‰ªïÊßòÊõ∏"

# Lavelo AI Ëá™ÂãïÂåñ„ÉÜ„Çπ„Éà„Ç≥„Éû„É≥„Éâ
test-lavelo:
	@echo -e "$(COLOR_CYAN)Running Lavelo AI Basic Test...$(COLOR_RESET)"
	@python lavelo_automation_test.py --mode=basic

test-supabase:
	@echo -e "$(COLOR_CYAN)Testing Supabase Connection...$(COLOR_RESET)"
	@python lavelo_automation_test.py --mode=supabase_test

test-memory:
	@echo -e "$(COLOR_CYAN)Testing Memory System...$(COLOR_RESET)"
	@python lavelo_automation_test.py --mode=memory_test

test-import:
	@echo -e "$(COLOR_CYAN)Testing Lavelo Import...$(COLOR_RESET)"
	@python lavelo_automation_test.py --mode=import_test

test-full:
	@echo -e "$(COLOR_CYAN)Running Full Lavelo AI Test Suite...$(COLOR_RESET)"
	@python lavelo_automation_test.py --mode=full_test

# GPT Engineer System Generation
generated_systems:
	@echo -e "$(COLOR_CYAN)Running GPT Engineer System Generation for $(COLOR_GREEN)$(name)$(COLOR_CYAN)...$(COLOR_RESET)"
	@if [ -z "$(name)" ]; then echo "‚ùå Error: name parameter is required. Usage: make generated_systems name=your_system_name"; exit 1; fi
	@echo -e "$(COLOR_CYAN)Creating new Gradio controller directory...$(COLOR_RESET)"
	@mkdir -p "app/Http/Controllers/Gradio/gra_$(shell printf "%02d" $$(ls -1d app/Http/Controllers/Gradio/gra_* 2>/dev/null | wc -l | xargs expr 1 +))_$(name)"
	@CONTROLLER_DIR="app/Http/Controllers/Gradio/gra_$(shell printf "%02d" $$(ls -1d app/Http/Controllers/Gradio/gra_* 2>/dev/null | wc -l | xargs expr 1 +))_$(name)" && \
	echo -e "$(COLOR_CYAN)Copying prompts for $(name)...$(COLOR_RESET)" && \
	if [ -d "generated_projects/$(name)" ]; then \
		cp -r "generated_projects/$(name)/." "$$CONTROLLER_DIR/"; \
	fi && \
	cd ./gpt-engineer && \
	export OPENAI_API_BASE="https://api.groq.com/openai/v1" && \
	export OPENAI_API_KEY="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" && \
	export MODEL_NAME="llama3-70b-8192" && \
	export LOCAL_MODEL=false && \
		echo "APIË®≠ÂÆö: $$OPENAI_API_BASE, Model: $$MODEL_NAME" && \
	yes y | timeout 20 poetry run gpt-engineer "../$$CONTROLLER_DIR" --model llama3-70b-8192 --temperature 0.1 || true
	@echo -e "$(COLOR_GREEN)‚úÖ System generated and added to Gradio Controllers$(COLOR_RESET)"
	@echo -e "$(COLOR_CYAN)üîó Auto-registering in Gradio interface...$(COLOR_RESET)"
	@python -c "import os, glob; dirs = glob.glob('app/Http/Controllers/Gradio/gra_*_$(name)'); print(f'‚úÖ Controller created: {dirs[0]}' if dirs else '‚ùå Controller directory not found'); print('üîÑ Gradio interface will auto-detect this new controller')"

gpt-setup:
	@echo -e "$(COLOR_CYAN)Setting up GPT Engineer...$(COLOR_RESET)"
	@cd ./gpt-engineer && pip install poetry && poetry install
	@echo -e "$(COLOR_GREEN)‚úÖ GPT Engineer setup completed$(COLOR_RESET)"

# n8n Workflow Automation Integration
n8n-setup:
	@echo -e "$(COLOR_CYAN)üîÑ Setting up n8n workflow integration...$(COLOR_RESET)"
	@python -m pip install requests
	@echo -e "$(COLOR_GREEN)‚úÖ n8n integration dependencies installed$(COLOR_RESET)"

n8n-test:
	@echo -e "$(COLOR_CYAN)Testing n8n connection...$(COLOR_RESET)"
	@python3 test_n8n_basic.py

n8n-deploy:
	@echo -e "$(COLOR_CYAN)Deploying AUTOCREATE AI workflows to n8n...$(COLOR_RESET)"
	@python3 n8n_workflow_manager.py

n8n-workflows:
	@echo -e "$(COLOR_CYAN)Managing n8n workflows...$(COLOR_RESET)"
	@if [ -z "$(action)" ]; then echo "‚ùå Error: action parameter required. Usage: make n8n-workflows action=[deploy|list|test]"; exit 1; fi
	@if [ "$(action)" = "deploy" ]; then python3 n8n_workflow_manager.py; fi
	@if [ "$(action)" = "list" ]; then python3 -c "from n8n_workflow_manager import N8nWorkflowManager; N8nWorkflowManager().list_workflows()"; fi
	@if [ "$(action)" = "test" ]; then python3 test_n8n_basic.py; fi

# AUTOCREATE AI - miibo Chat Integration
miibo-test:
	@echo -e "$(COLOR_CYAN)Testing miibo API integration...$(COLOR_RESET)"
	@python3 test_miibo_integration.py

miibo-deploy:
	@echo -e "$(COLOR_CYAN)Deploying miibo + n8n integration workflow...$(COLOR_RESET)"
	@python3 autocreate_miibo_integration.py

miibo-chat:
	@echo -e "$(COLOR_CYAN)Starting AUTOCREATE AI chat interface...$(COLOR_RESET)"
	@python3 -c "from autocreate_miibo_integration import AUTOCREATEChatIntegration; AUTOCREATEChatIntegration().test_integrated_system()"


# GitHub Issue Management
create-github-issue:
	@echo -e "$(COLOR_CYAN)Creating GitHub Issue for AI-Human BPMS Assistant...$(COLOR_RESET)"
	@python3 create_github_issue.py

github-issue-ai-bpms:
	@echo -e "$(COLOR_CYAN)Creating AI-Human BPMS specific GitHub Issue...$(COLOR_RESET)"
	@python3 create_github_issue.py --type ai-human-bpms

github-issue-status:
	@echo -e "$(COLOR_CYAN)Checking GitHub repository and issue creation status...$(COLOR_RESET)"
	@python3 -c "from create_github_issue import GitHubIssueCreator; creator = GitHubIssueCreator(); creator.check_repository_status()"

github-workflow:
	@echo -e "$(COLOR_CYAN)Running complete GitHub workflow (create issue + documentation)...$(COLOR_RESET)"
	@echo "Step 1: Creating GitHub Issue..."
	@python3 create_github_issue.py
	@echo "Step 2: Generating status report..."
	@python3 -c "print('‚úÖ GitHub workflow completed successfully!')"

# Complete project workflow with GitHub Issue
complete-workflow:
	@echo -e "$(COLOR_CYAN)Running complete AUTOCREATE workflow...$(COLOR_RESET)"
	@echo "Step 1: Running tests..."
	@make ci-test || true
	@echo "Step 2: Creating GitHub Issue..."
	@make create-github-issue
	@echo "Step 3: Generating documentation..."
	@python3 -c "print('üìö Documentation generated')"
	@echo -e "$(COLOR_GREEN)‚úÖ Complete workflow finished!$(COLOR_RESET)"

# ProcessMaker BPM Integration
processmaker-setup:
	@echo -e "$(COLOR_CYAN)Setting up ProcessMaker BPM integration...$(COLOR_RESET)"
	@cd vendor/processmaker && composer install
	@echo -e "$(COLOR_GREEN)‚úÖ ProcessMaker setup completed$(COLOR_RESET)"

processmaker-start:
	@echo -e "$(COLOR_CYAN)Starting ProcessMaker BPM platform...$(COLOR_RESET)"
	@cd vendor/processmaker && php artisan serve --host=0.0.0.0 --port=8080
	
processmaker-status:
	@echo -e "$(COLOR_CYAN)Checking ProcessMaker status...$(COLOR_RESET)"
	@if [ -d "vendor/processmaker" ]; then echo "‚úÖ ProcessMaker submodule exists"; else echo "‚ùå ProcessMaker not found"; fi
	@cd vendor/processmaker && git status --porcelain | wc -l | xargs -I {} echo "Modified files: {}"

# Puppeteer Chrome Extension commands
puppeteer-install:
	npm install puppeteer

puppeteer-test:
	node puppeteer_chrome_extension.js

puppeteer-debug:
	node --inspect-brk puppeteer_chrome_extension.js

# Groq API Test commands
groq-test:
	node groq_test.js test

groq-models:
	node groq_test.js models

groq-all:
	node groq_test.js both

groq-install:
	npm install axios dotenv

# Groq API Test commands (PythonÁâà„ÇÇËøΩÂä†)
groq-test-py:
	python groq_test.py test

groq-models-py:
	python groq_test.py models

groq-all-py:
	python groq_test.py both

groq-install-py:
	pip install requests python-dotenv

# Chrome Extension Error Fix commands
chrome-ext-fix:
	cd chrome-extension && node env-loader.js

chrome-ext-validate:
	cd chrome-extension && npx web-ext lint

chrome-ext-reload:
	"$BROWSER" chrome://extensions

# Chrome Extension Notification Test commands
chrome-ext-test-notification:
	"$BROWSER" chrome://extensions && echo "Êã°ÂºµÊ©üËÉΩ„ÇíÊúâÂäπÂåñ„Åó„Å¶„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"

chrome-ext-debug:
	"$BROWSER" chrome://extensions && echo "„Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπ„Å´„Åó„Å¶„ÄÅ„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Éö„Éº„Ç∏„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"

chrome-ext-console:
	echo "ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„Åß„Ç®„É©„Éº„ÇíÁ¢∫Ë™ç„Åô„Çã„Å´„ÅØ:"
	echo "1. chrome://extensions „ÇíÈñã„Åè"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"
	echo "3. Êã°ÂºµÊ©üËÉΩ„ÅÆ 'service worker' „É™„É≥„ÇØ„Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "4. „Ç≥„É≥„ÇΩ„Éº„É´„Çø„Éñ„Åß„É≠„Ç∞„ÇíÁ¢∫Ë™ç"

# Chrome Extension Simple Notification Test
chrome-ext-simple-test:
	echo "„Ç∑„É≥„Éó„É´ÈÄöÁü•„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Åæ„Åô"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Éö„Éº„Ç∏„ÇíÈñã„Åç„Åæ„Åô"
	"$BROWSER" chrome://extensions
	echo "2. Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
	echo "3. „Éá„Éô„É≠„ÉÉ„Éë„Éº„ÉÑ„Éº„É´ > service worker „Åß„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÁ¢∫Ë™ç"

chrome-ext-notification-debug:
	echo "ÈÄöÁü•„Éá„Éê„ÉÉ„Ç∞ÊâãÈ†Ü:"
	echo "1. chrome://settings/content/notifications „ÇíÈñã„Åè"
	echo "2. ÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç"
	echo "3. chrome://extensions „Åß„Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπ„Å´"
	echo "4. service worker „ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„Åß„Ç®„É©„Éº„ÇíÁ¢∫Ë™ç"

# Chrome Extension Comprehensive Test
chrome-ext-comprehensive-test:
	echo "üß™ ÂåÖÊã¨ÁöÑÈÄöÁü•„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	echo "‰ª•‰∏ã„ÅÆÊâãÈ†Ü„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„ÉÑ„Éº„É´„Åßservice worker„ÇíÈñã„Åè"
	echo "3. „Ç≥„É≥„ÇΩ„Éº„É´„Åß‰ª•‰∏ã„ÇíÂÆüË°å:"
	echo "   chrome.runtime.sendMessage({type: 'RUN_COMPREHENSIVE_TEST'})"

chrome-ext-permissions-check:
	echo "üîç ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆÊ®©ÈôêÁ¢∫Ë™ç"
	echo "1. chrome://settings/content/notifications „ÇíÁ¢∫Ë™ç"
	echo "2. Êã°ÂºµÊ©üËÉΩ„ÅÆÈÄöÁü•Ê®©Èôê„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç"
	echo "3. chrome://extensions „ÅßÊã°ÂºµÊ©üËÉΩ„ÅÆË©≥Á¥∞„ÇíÁ¢∫Ë™ç"

# Chrome Extension Safe Notification Test
chrome-ext-safe-test:
	echo "üõ°Ô∏è ÂÆâÂÖ®„Å™ÈÄöÁü•„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	echo "„Ç≥„É≥„ÇΩ„Éº„É´„Åß‰ª•‰∏ã„ÇíÂÆüË°å:"
	echo "chrome.runtime.sendMessage({type: 'TEST_SAFE_NOTIFICATION'})"

chrome-ext-manual-notification:
	echo "üì± ÊâãÂãïÈÄöÁü•„ÉÜ„Çπ„Éà"
	echo "„Ç≥„É≥„ÇΩ„Éº„É´„Åß‰ª•‰∏ã„ÇíÂÆüË°å:"
	echo "chrome.runtime.sendMessage({type: 'CREATE_SAFE_NOTIFICATION', title: '„ÉÜ„Çπ„Éà', message: '„É°„ÉÉ„Çª„Éº„Ç∏'})"

chrome-ext-debug-props:
	echo "üîç ÈÄöÁü•„Éó„É≠„Éë„ÉÜ„Ç£„Éá„Éê„ÉÉ„Ç∞"
	echo "‰ª•‰∏ã„ÅÆÈ†ÖÁõÆ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ:"
	echo "1. type: 'basic' „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã"
	echo "2. iconUrl: Base64„Éá„Éº„ÇøURL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã"
	echo "3. title: ÊñáÂ≠óÂàó„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã"
	echo "4. message: ÊñáÂ≠óÂàó„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åã"

# Chrome Extension Minimal Notification Test
chrome-ext-minimal-test:
	echo "üîß ÊúÄÂ∞èÈôêÈÄöÁü•„ÉÜ„Çπ„Éà"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßÂÆüË°å: chrome.runtime.sendMessage({type: 'TEST_MINIMAL_NOTIFICATION'})"

chrome-ext-check-permissions:
	echo "üîç ÈÄöÁü•Ê®©ÈôêÁ¢∫Ë™ç"
	echo "1. chrome://settings/content/notifications „ÇíÈñã„Åè"
	echo "2. „Çµ„Ç§„ÉàÂà•„ÅÆÈÄöÁü•Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç"
	echo "3. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßÂÆüË°å: chrome.runtime.sendMessage({type: 'CHECK_PERMISSIONS'})"

chrome-ext-fix-images:
	echo "üñºÔ∏è ÁîªÂÉè„Ç®„É©„Éº‰øÆÊ≠£ÊâãÈ†Ü"
	echo "1. iconUrl„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÂÆåÂÖ®„Å´ÂâäÈô§"
	echo "2. type, title, message„ÅÆ„Åø„Çí‰ΩøÁî®"
	echo "3. „Ç∑„É≥„Éó„É´„Å™ÈÄöÁü•„Å´Â§âÊõ¥ÂÆå‰∫Ü"

# Chrome Extension Isolated Notification Test
chrome-ext-isolated-test:
	echo "üî¨ Áã¨Á´ãÈÄöÁü•„ÉÜ„Çπ„ÉàÂÆüË°å"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„ÉÑ„Éº„É´„Åßservice worker„ÇíÈñã„Åè"
	echo "3. 3ÁßíÂæå„Å´Ëá™Âãï„Åß„ÉÜ„Çπ„ÉàÂÆüË°å„Åï„Çå„Åæ„Åô"
	echo "4. ÊâãÂãïÂÆüË°å: chrome.runtime.sendMessage({type: 'ISOLATED_NOTIFICATION_TEST'})"

chrome-ext-debug-detailed:
	echo "üêõ Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞ÊâãÈ†Ü"
	echo "1. chrome://extensions „Åß„Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"
	echo "2. Êã°ÂºµÊ©üËÉΩ„ÅÆ 'service worker' „Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "3. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßË©≥Á¥∞„Å™„É≠„Ç∞„ÇíÁ¢∫Ë™ç"
	echo "4. showNotificationÈñ¢Êï∞„ÅÆÂºïÊï∞„ÇíÁ¢∫Ë™ç"
	echo "5. notificationOptions„ÅÆÂêÑ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÁ¢∫Ë™ç"

# Chrome Extension Basic Notification Test
chrome-ext-basic-test:
	echo "üî¨ Âü∫Êú¨ÈÄöÁü•„ÉÜ„Çπ„ÉàÂÆüË°å"
	echo "ÊâãÈ†Ü:"
	echo "1. chrome://extensions „ÇíÈñã„Åè"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"
	echo "3. Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "4. service worker „Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "5. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßË©≥Á¥∞„É≠„Ç∞„ÇíÁ¢∫Ë™ç"
	echo "6. ÊâãÂãïÂÆüË°å: chrome.runtime.sendMessage({type: 'BASIC_NOTIFICATION_TEST'})"

chrome-ext-permissions-debug:
	echo "üîç Ê®©Èôê„Éá„Éê„ÉÉ„Ç∞"
	echo "Á¢∫Ë™çÈ†ÖÁõÆ:"
	echo "1. manifest.json „Å´ 'notifications' Ê®©Èôê„Åå„ÅÇ„Çã„Åã"
	echo "2. chrome://settings/content/notifications „ÅßÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Çã„Åã"
	echo "3. chrome://extensions „ÅßÊã°ÂºµÊ©üËÉΩ„ÅÆË©≥Á¥∞„ÇíÁ¢∫Ë™ç"
	echo "4. „Éá„Éô„É≠„ÉÉ„Éë„Éº„ÉÑ„Éº„É´„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ¢∫Ë™ç"

# Chrome Extension Connection Test
chrome-ext-connection-test:
	echo "üîó ChromeÊã°ÂºµÊ©üËÉΩÊé•Á∂ö„ÉÜ„Çπ„Éà"
	echo "ÊâãÈ†Ü:"
	echo "1. chrome://extensions „ÇíÈñã„Åè"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"
	echo "3. Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "4. service worker„Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "5. 3ÁßíÂæå„Å´Ëá™Âãï„ÉÜ„Çπ„ÉàÂÆüË°å"
	echo "6. ÊâãÂãïÂÆüË°å: testConnection()"

chrome-ext-fix-connection:
	echo "üîß Êé•Á∂ö„Ç®„É©„Éº‰øÆÊ≠£ÊâãÈ†Ü"
	echo "ÂéüÂõ†„Å®ÂØæÁ≠ñ:"
	echo "1. 'Receiving end does not exist' = „É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éä„Éº„ÅåÊú™ÁôªÈå≤"
	echo "2. service worker„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ = Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "3. manifest.json„ÅÆÊ®©Èôê‰∏çË∂≥ = permissionsÁ¢∫Ë™ç"
	echo "4. „É°„ÉÉ„Çª„Éº„Ç∏„Éè„É≥„Éâ„É©„Éº„ÅÆ„Ç®„É©„Éº = try-catchËøΩÂä†"

# Chrome Extension Service Worker Diagnostic
chrome-ext-service-worker-diagnostic:
	echo "ü©∫ Service WorkerÈÄö‰ø°Ë®∫Êñ≠"
	echo "ÊâãÈ†Ü:"
	echo "1. chrome://extensions „ÇíÈñã„Åè"
	echo "2. „Éá„Éô„É≠„ÉÉ„Éë„Éº„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"
	echo "3. Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "4. service worker„Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "5. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßË®∫Êñ≠ÁµêÊûú„ÇíÁ¢∫Ë™ç"
	echo "6. ÊâãÂãïË®∫Êñ≠: chrome.runtime.sendMessage({type: 'RUN_COMMUNICATION_DIAGNOSTIC'})"

chrome-ext-fix-receiving-end:
	echo "üîß 'Receiving end does not exist' „Ç®„É©„Éº‰øÆÊ≠£"
	echo "ÂéüÂõ†„Å®ÂØæÁ≠ñ:"
	echo "1. Service Worker„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ ‚Üí Êã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. „É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éä„ÉºÊú™ÁôªÈå≤ ‚Üí background.js„ÇíÁ¢∫Ë™ç"
	echo "3. chrome.runtime.onMessage.addListener() „ÅåÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç"
	echo "4. return true „ÅßÈùûÂêåÊúüÂøúÁ≠î„ÇíÁ∂≠ÊåÅ"
	echo "5. try-catch „Åß„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞"

# Chrome Extension AI Response Test
chrome-ext-ai-test:
	echo "ü§ñ AIÂ§ßÁµ±È†òÂøúÁ≠îÊ©üËÉΩ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. test-ai-response.html „Éö„Éº„Ç∏„ÇíÈñã„Åè"
	echo "3. „ÉÜ„Çπ„Éà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÂÆüË°å"
	"$BROWSER" file://$(shell pwd)/chrome-extension/test-ai-response.html

chrome-ext-ai-console-test:
	echo "üß™ AIÂøúÁ≠î„Ç≥„É≥„ÇΩ„Éº„É´„ÉÜ„Çπ„Éà"
	echo "„Ç≥„É≥„ÇΩ„Éº„É´„Åß‰ª•‰∏ã„ÇíÂÆüË°å:"
	echo "chrome.runtime.sendMessage({type: 'test_ai_response', data: {message: '„Åì„Çì„Å´„Å°„ÅØ', username: '„ÉÜ„Çπ„Éà'}})"

chrome-ext-ai-edge-test:
	echo "üîç AIÂøúÁ≠î„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„ÉÜ„Çπ„Éà"
	echo "‰ª•‰∏ã„ÅÆ„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„Çí„ÉÜ„Çπ„Éà:"
	echo "1. undefined „É°„ÉÉ„Çª„Éº„Ç∏"
	echo "2. null „É°„ÉÉ„Çª„Éº„Ç∏"
	echo "3. Á©∫ÊñáÂ≠óÂàó"
	echo "4. ÈùûÊñáÂ≠óÂàó„Éá„Éº„Çø"
	echo "„Ç≥„É≥„ÇΩ„Éº„É´ÂÆüË°å‰æã:"
	echo "chrome.runtime.sendMessage({type: 'test_ai_response', data: undefined})"

chrome-ext-ai-debug:
	echo "üêõ AIÂøúÁ≠îÊ©üËÉΩ„Éá„Éê„ÉÉ„Ç∞"
	echo "1. „Éá„Éô„É≠„ÉÉ„Éë„Éº„ÉÑ„Éº„É´„Åß„Çµ„Éº„Éì„Çπ„ÉØ„Éº„Ç´„Éº„ÇíÈñã„Åè"
	echo "2. AIÂøúÁ≠îÁîüÊàêÊôÇ„ÅÆ„É≠„Ç∞„ÇíÁ¢∫Ë™ç"
	echo "3. TypeError „ÇÑ undefined „Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ"
	echo "4. generateAIPresidentResponse Èñ¢Êï∞„ÅÆÂãï‰ΩúÁ¢∫Ë™ç"

# Chrome Extension Error Fix Status
chrome-ext-fix-status:
	echo "üîß ChromeÊã°ÂºµÊ©üËÉΩ„Ç®„É©„Éº‰øÆÊ≠£Áä∂Ê≥Å"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: ÈÄöÁü•„ÅÆÂøÖÈ†à„Éó„É≠„Éë„ÉÜ„Ç£ (type, iconUrl, title, message)"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: generateAIPresidentResponse „ÅÆ TypeError"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: undefined/null „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂÆâÂÖ®Âá¶ÁêÜ"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: ÂåÖÊã¨ÁöÑ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Å®„É≠„Ç∞"
	echo "‚úÖ ËøΩÂä†Ê∏à„Åø: AIÂøúÁ≠îÊ©üËÉΩ„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà"
	echo "üß™ „ÉÜ„Çπ„ÉàÂèØËÉΩ: ÈÄöÁü•Ë°®Á§∫„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ„ÄÅAIÂøúÁ≠îÁîüÊàê"

# Chrome Extension TypeError Fix Verification
chrome-ext-typeerror-test:
	echo "üîß TypeError‰øÆÊ≠£Á¢∫Ë™ç„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"
	echo "1. ChromeÊã°ÂºµÊ©üËÉΩ„Çí„É™„É≠„Éº„Éâ"
	echo "2. TypeError‰øÆÊ≠£Á¢∫Ë™ç„ÉÜ„Çπ„Éà„Éö„Éº„Ç∏„ÇíÈñã„Åè"
	echo "3. ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶‰øÆÊ≠£„ÇíÁ¢∫Ë™ç"
	"$BROWSER" file://$(shell pwd)/chrome-extension/typeerror-fix-verification.html

chrome-ext-error-status:
	echo "üîç ÁèæÂú®„ÅÆ„Ç®„É©„ÉºÁä∂Ê≥ÅÁ¢∫Ë™ç"
	echo "=== TypeError‰øÆÊ≠£Áä∂Ê≥Å ==="
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: ownerid„ÅÆundefinedÂá¶ÁêÜ"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: messages„ÅÆundefinedÂá¶ÁêÜ"  
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: generateAIPresidentResponse„ÅÆÂÆâÂÖ®„Å™ÊñáÂ≠óÂàóÂá¶ÁêÜ"
	echo "‚úÖ ‰øÆÊ≠£Ê∏à„Åø: includes„É°„ÇΩ„ÉÉ„Éâ„ÅÆTypeErrorÈò≤Ê≠¢"
	echo "‚úÖ ËøΩÂä†Ê∏à„Åø: ÂåÖÊã¨ÁöÑ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞"
	echo "üß™ „ÉÜ„Çπ„ÉàÂèØËÉΩ: $(shell pwd)/chrome-extension/typeerror-fix-verification.html"

chrome-ext-quick-fix-test:
	echo "üöÄ „ÇØ„Ç§„ÉÉ„ÇØ‰øÆÊ≠£Á¢∫Ë™ç„ÉÜ„Çπ„Éà"
	echo "„Ç≥„É≥„ÇΩ„Éº„É´„Åß‰ª•‰∏ã„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:"
	echo "// undefined ownerid„ÉÜ„Çπ„Éà"
	echo "chrome.runtime.sendMessage({type: 'test_ai_response', data: {id: 1, ownerid: undefined, messages: '„ÉÜ„Çπ„Éà'}})"
	echo ""
	echo "// undefined messages„ÉÜ„Çπ„Éà"  
	echo "chrome.runtime.sendMessage({type: 'test_ai_response', data: {id: 2, ownerid: 'user', messages: undefined}})"
	echo ""
	echo "// ÂÆåÂÖ®undefined„ÉÜ„Çπ„Éà"
	echo "chrome.runtime.sendMessage({type: 'test_ai_response', data: undefined})"

# Chrome Extension Supabase Configuration Check
chrome-ext-config-check:
	echo "üîß SupabaseË®≠ÂÆöÁ¢∫Ë™ç„Éö„Éº„Ç∏„ÇíÈñã„Åç„Åæ„Åô"
	echo "„Åì„ÅÆ„Éö„Éº„Ç∏„ÅßAPI„Ç≠„Éº„ÅÆË®≠ÂÆöÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô"
	"$BROWSER" file://$(shell pwd)/chrome-extension/supabase-config-check.html

chrome-ext-api-status:
	echo "üîç API„Ç≠„ÉºË®≠ÂÆöÁä∂Ê≥ÅÁ¢∫Ë™ç"
	echo "=== ÁèæÂú®„ÅÆÁä∂Ê≥Å ==="
	echo "‚úÖ Supabase URL: https://rootomzbucovwdqsscqd.supabase.co"
	echo "‚úÖ API„Ç≠„Éº: background.js„Å´„Éè„Éº„Éâ„Ç≥„Éº„ÉâÊ∏à„Åø"
	echo "‚úÖ „Ç≠„ÉºÂΩ¢Âºè: JWT „Éà„Éº„ÇØ„É≥ (ÊúâÂäπÊúüÈôê: 2051Âπ¥)"
	echo "üîß „ÇÇ„Åó„ÄåÊú™Ë®≠ÂÆö„Äç„Å®Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÅÆË°®Á§∫„Éê„Ç∞„Åß„Åô"
	echo "üìä ÂÆüÈöõ„ÅÆË®≠ÂÆöÁ¢∫Ë™ç: make chrome-ext-config-check"

# Chrome Extension XPath Configuration Management
chrome-ext-xpath-config:
	echo "‚öôÔ∏è XPathË®≠ÂÆöÁÆ°ÁêÜ„Éö„Éº„Ç∏„ÇíÈñã„Åç„Åæ„Åô"
	echo "„Åì„ÅÆ„Éö„Éº„Ç∏„ÅßÁï∞„Å™„Çã„Çµ„Ç§„ÉàÁî®„ÅÆXPathË®≠ÂÆö„ÇíÁÆ°ÁêÜ„Åß„Åç„Åæ„Åô"
	echo "üìù Ê©üËÉΩ: XPathË®≠ÂÆö‰ΩúÊàê„ÄÅ„ÉÜ„Çπ„Éà„ÄÅ‰øùÂ≠ò„ÄÅË™≠„ÅøËæº„Åø"
	"$BROWSER" file://$(shell pwd)/chrome-extension/xpath-config-manager.html

chrome-ext-xpath-help:
	echo "üìö XPathË®≠ÂÆöÊ©üËÉΩ„Éò„É´„Éó"
	echo "=== ‰∏ª„Å™Ê©üËÉΩ ==="
	echo "üéØ XPathË®≠ÂÆöÁÆ°ÁêÜ: Áï∞„Å™„Çã„Çµ„Ç§„ÉàÁî®„ÅÆXPathË®≠ÂÆö„Çí‰øùÂ≠ò"
	echo "üß™ XPath„ÉÜ„Çπ„Éà: ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏„ÅßXPath„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã„Åã„ÉÜ„Çπ„Éà"
	echo "üìã „Éó„É™„Çª„ÉÉ„Éà: „Çà„Åè‰ΩøÁî®„Åï„Çå„ÇãXPath„Éë„Çø„Éº„É≥„ÅÆ„Éó„É™„Çª„ÉÉ„Éà"
	echo "üíæ Ë®≠ÂÆö‰øùÂ≠ò/Ë™≠„ÅøËæº„Åø: Ë®≠ÂÆö„ÅÆÊ∞∏Á∂öÂåñ„Å®ÂÜçÂà©Áî®"
	echo "üì§ „Ç®„ÇØ„Çπ„Éù„Éº„Éà/„Ç§„É≥„Éù„Éº„Éà: Ë®≠ÂÆö„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å®ÂÖ±Êúâ"
	echo ""
	echo "=== ‰ΩøÁî®‰æã ==="
	echo "1. XPathË®≠ÂÆö„Éö„Éº„Ç∏„ÇíÈñã„Åè: make chrome-ext-xpath-config"
	echo "2. ÂØæË±°„Çµ„Ç§„Éà„Åß„Éö„Éº„Ç∏„ÇíÈñã„Åè"
	echo "3. XPath„ÇíÂÖ•Âäõ„Åæ„Åü„ÅØ„Éó„É™„Çª„ÉÉ„Éà„ÇíÈÅ∏Êäû"
	echo "4. XPath„ÉÜ„Çπ„Éà„Éú„Çø„É≥„Åß„ÉÜ„Çπ„ÉàÂÆüË°å"
	echo "5. Âãï‰ΩúÁ¢∫Ë™çÂæå„ÄÅË®≠ÂÆö„Çí‰øùÂ≠ò"

chrome-ext-xpath-test:
	echo "üß™ XPath„ÉÜ„Çπ„ÉàÂÆüË°åÊâãÈ†Ü"
	echo "1. „ÉÜ„Çπ„ÉàÂØæË±°„ÅÆWeb„Éö„Éº„Ç∏„ÇíÈñã„Åè"
	echo "2. XPathË®≠ÂÆöÁÆ°ÁêÜ„Éö„Éº„Ç∏„ÇíÈñã„Åè"
	echo "3. ÂØæË±°Ë¶ÅÁ¥†„ÅÆXPath„ÇíÂÖ•Âäõ"
	echo "4. 'XPath„ÉÜ„Çπ„Éà'„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ"
	echo "5. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßÁµêÊûú„ÇíÁ¢∫Ë™ç"
	echo ""
	echo "üîç „Çà„Åè‰ΩøÁî®„Åï„Çå„ÇãXPath„Éë„Çø„Éº„É≥:"
	echo "ÂÖ•ÂäõÊ¨Ñ: //input[@type='text'] „Åæ„Åü„ÅØ //textarea"
	echo "ÈÄÅ‰ø°„Éú„Çø„É≥: //button[@type='submit'] „Åæ„Åü„ÅØ //button[contains(text(), 'ÈÄÅ‰ø°')]"
	echo "„É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É™„Ç¢: //div[contains(@class, 'chat')] „Åæ„Åü„ÅØ //div[contains(@class, 'message')]"

chrome-ext-xpath-examples:
	echo "üìù XPathË®≠ÂÆö‰æãÈõÜ"
	echo ""
	echo "=== Supabase Chat „Çµ„Ç§„ÉàÁî® ==="
	echo "„É°„ÉÉ„Çª„Éº„Ç∏ÂÖ•Âäõ: //textarea[@placeholder='„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ...']"
	echo "ÈÄÅ‰ø°„Éú„Çø„É≥: //button[contains(text(), 'ÈÄÅ‰ø°')]"
	echo "„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫: //div[@class='chat-messages']"
	echo ""
	echo "=== ProcessMakerÁî® ==="
	echo "ÂÖ•ÂäõÊ¨Ñ: //input[@name='message'] „Åæ„Åü„ÅØ //textarea[@name='comment']"
	echo "ÈÄÅ‰ø°„Éú„Çø„É≥: //button[@class='btn btn-primary']"
	echo "„Éï„Ç©„Éº„É†: //form[@class='process-form']"
	echo ""
	echo "=== Ê±éÁî®„ÉÅ„É£„ÉÉ„Éà„Çµ„Ç§„ÉàÁî® ==="
	echo "ÂÖ•ÂäõÊ¨Ñ: //input[contains(@placeholder, 'message')] „Åæ„Åü„ÅØ //div[@contenteditable='true']"
	echo "ÈÄÅ‰ø°„Éú„Çø„É≥: //button[contains(@class, 'send')] „Åæ„Åü„ÅØ //input[@type='submit']"
	echo "„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫: //ul[@class='message-list'] „Åæ„Åü„ÅØ //div[@class='chat-container']"

# ========================================================================================
# JIRA Integration Commands
# ========================================================================================

# JIRAÁµ±ÂêàÁä∂Ê≥ÅÁ¢∫Ë™çÔºà‰øÆÊ≠£ÁâàÔºâ
jira-status:
	@echo -e "$(COLOR_CYAN)ÔøΩ JIRAÁµ±ÂêàÁä∂Ê≥Å$(COLOR_RESET)"
	@echo "========================"
	@echo "üîç Áí∞Â¢ÉÂ§âÊï∞Á¢∫Ë™ç:"
	@if [ -n "$$JIRA_URL" ]; then echo "   ‚úÖ JIRA_URL: $$JIRA_URL"; else echo "   ‚ùå JIRA_URL: Êú™Ë®≠ÂÆö"; fi
	@if [ -n "$$JIRA_USERNAME" ]; then echo "   ‚úÖ JIRA_USERNAME: $$JIRA_USERNAME"; else echo "   ‚ùå JIRA_USERNAME: Êú™Ë®≠ÂÆö"; fi
	@if [ -n "$$JIRA_API_TOKEN" ]; then echo "   ‚úÖ JIRA_API_TOKEN: Ë®≠ÂÆöÊ∏à„Åø"; else echo "   ‚ùå JIRA_API_TOKEN: Êú™Ë®≠ÂÆö"; fi
	@if [ -n "$$JIRA_PROJECT_KEY" ]; then echo "   ‚úÖ JIRA_PROJECT_KEY: $$JIRA_PROJECT_KEY"; else echo "   ‚ùå JIRA_PROJECT_KEY: Êú™Ë®≠ÂÆö"; fi
	@echo ""
	@echo "üìÅ Èñ¢ÈÄ£„Éï„Ç°„Ç§„É´Á¢∫Ë™ç:"
	@if [ -f "jira_ticket_creator.py" ]; then echo "   ‚úÖ jira_ticket_creator.py"; else echo "   ‚ùå jira_ticket_creator.py"; fi
	@if [ -f "JIRA_SETUP_COMPLETE_GUIDE.md" ]; then echo "   ‚úÖ JIRA_SETUP_COMPLETE_GUIDE.md"; else echo "   ‚ùå JIRA_SETUP_COMPLETE_GUIDE.md"; fi
	@echo ""
	@echo "üöÄ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:"
	@echo "   1. Ë®≠ÂÆöÊú™ÂÆå‰∫Ü„ÅÆÂ†¥Âêà: make jira-setup-guide"
	@echo "   2. Êé•Á∂ö„ÉÜ„Çπ„Éà: python jira_ticket_creator.py"  
	@echo "   3. „ÉÅ„Ç±„ÉÉ„Éà‰ΩúÊàê: make jira-create-tickets"

# JIRA APIÊé•Á∂ö„ÉÜ„Çπ„ÉàÔºà‰øÆÊ≠£ÁâàÔºâ
jira-test:
	@echo -e "$(COLOR_CYAN)üîå JIRA APIÊé•Á∂ö„ÉÜ„Çπ„Éà$(COLOR_RESET)"
	@echo "=================================="
	@python jira_ticket_creator.py

# JIRAË®∫Êñ≠Ôºà‰øÆÊ≠£ÁâàÔºâ
jira-diagnostics:
	@echo -e "$(COLOR_CYAN)ü©∫ JIRAÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ë®∫Êñ≠$(COLOR_RESET)"
	@echo "===================================="
	@python jira_ticket_creator.py

# AUTOCREATE„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî®JIRA„ÉÅ„Ç±„ÉÉ„Éà‰ΩúÊàêÔºà‰øÆÊ≠£ÁâàÔºâ
jira-create-tickets:
	@echo -e "$(COLOR_CYAN)üéØ AUTOCREATE JIRA„ÉÅ„Ç±„ÉÉ„Éà‰ΩúÊàê$(COLOR_RESET)"
	@echo "=================================="
	@python -c "import sys; sys.path.append('.'); from jira_ticket_creator import JiraTicketCreator; JiraTicketCreator().create_autocreate_tickets()"

# JIRAË®≠ÂÆö„Ç¨„Ç§„ÉâË°®Á§∫
jira-setup-guide:
	@echo -e "$(COLOR_CYAN)üìö JIRAÁµ±Âêà„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç¨„Ç§„Éâ$(COLOR_RESET)"
	@echo "=================================="
	@echo "üîß JIRA„Ç¢„Ç´„Ç¶„É≥„Éà„Å®API TokenË®≠ÂÆöÊâãÈ†Ü:"
	@echo ""
	@echo "1. JIRA Cloud„Ç¢„Ç´„Ç¶„É≥„ÉàÊ∫ñÂÇô"
	@echo "   - https://your-domain.atlassian.net „Å´„Ç¢„ÇØ„Çª„Çπ"
	@echo "   - „Ç¢„Ç´„Ç¶„É≥„Éà„Å´„É≠„Ç∞„Ç§„É≥"
	@echo ""
	@echo "2. API Token‰ΩúÊàê"
	@echo "   - „Ç¢„Ç´„Ç¶„É≥„ÉàË®≠ÂÆö ‚Üí „Çª„Ç≠„É•„É™„ÉÜ„Ç£ ‚Üí API Token„Çí‰ΩúÊàê"
	@echo "   - TokenÂêç: 'AUTOCREATE Integration'"
	@echo "   - ‰ΩúÊàê„Åï„Çå„ÅüToken„Çí„Ç≥„Éî„Éº"
	@echo ""
	@echo "3. .env„Éï„Ç°„Ç§„É´Êõ¥Êñ∞"
	@echo "   JIRA_URL=https://your-domain.atlassian.net"
	@echo "   JIRA_USERNAME=your-email@domain.com"
	@echo "   JIRA_API_TOKEN=your_api_token_here"
	@echo "   JIRA_PROJECT_KEY=AUTOCREATE"
	@echo ""
	@echo "4. Êé•Á∂ö„ÉÜ„Çπ„ÉàÂÆüË°å"
	@echo "   make jira-test"
	@echo ""
	@echo "üéØ Ë©≥Á¥∞„Ç¨„Ç§„Éâ: JIRA_SETUP_COMPLETE_GUIDE.md"

# üåê External Integration & Automation
github-issue-pyautogui:
	@echo -e "$(COLOR_CYAN)Creating GitHub Issue for External Integration PyAutoGUI System...$(COLOR_RESET)"
	@echo "ü§ñ Â§ñÈÉ®ÈÄ£Êê∫pyautoguiËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É† GitHub Issue‰ΩúÊàê‰∏≠..."
	@python3 create_external_integration_issue.py

external-automation-issue:
	@echo -e "$(COLOR_CYAN)Creating comprehensive GitHub Issue for external automation system...$(COLOR_RESET)"
	@echo "üöÄ Â§ñÈÉ®ÈÄ£Êê∫ Supabase ‚Üî VS Code ‚Üî GitHub Copilot Ëá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†"
	@python3 create_external_integration_issue.py --comprehensive

pyautogui-system-status:
	@echo -e "$(COLOR_CYAN)Checking pyautogui automation system status...$(COLOR_RESET)"
	@python3 -c "
import os
print('üìä Â§ñÈÉ®ÈÄ£Êê∫pyautoguiËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É† „Çπ„ÉÜ„Éº„Çø„Çπ:')
files = ['pyautogui_copilot_chat.py', 'supabase_monitor.py', 'simple_chat_test.py']
for f in files:
    if os.path.exists(f):
        print(f'‚úÖ {f} - Â≠òÂú®')
    else:
        print(f'‚ùå {f} - ‰∏çÂ≠òÂú®')
print('üéØ „Ç∑„Çπ„ÉÜ„É†: Supabase ‚Üí pyautogui ‚Üí VS Code Copilot')
"

# üåê GitHub CLI Integration Commands
gh-auth:
	@echo -e "$(COLOR_CYAN)GitHub CLI Authentication with token...$(COLOR_RESET)"
	@echo "$(GITHUB_TOKEN)" | gh auth login --with-token
	@echo "‚úÖ GitHub CLI authenticated"

gh-issue-external-integration:
	@echo -e "$(COLOR_CYAN)Creating External Integration pyautogui Issue with GitHub CLI...$(COLOR_RESET)"
	@gh issue create \
		--title "üåê Â§ñÈÉ®ÈÄ£Êê∫pyautoguiËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É† - Supabase ‚Üî VS Code ‚Üî GitHub Copilot" \
		--body "## üéØ „Ç∑„Çπ„ÉÜ„É†Ê¶ÇË¶Å\n\nÂÆåÂÖ®„Å´Â§ñÈÉ®„Å®„Å§„Å™„Åå„Å£„ÅüËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†„ÅåÂÆåÊàê„Åó„Åæ„Åó„ÅüÔºÅ\nSupabase„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÊñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ§úÂá∫„Åó„ÄÅpyautogui„ÅßËá™ÂãïÁöÑ„Å´VS Code„ÅÆGitHub Copilot„ÉÅ„É£„ÉÉ„Éà„Å´ÊäïÁ®ø„Åó„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†„ÅßAIÂøúÁ≠î„ÇíÂèó„ÅëÂèñ„Çã„Ç∑„Çπ„ÉÜ„É†„Åß„Åô„ÄÇ\n\n## ‚úÖ ÂÆüÁèæÊ©üËÉΩ\n- Â§ñÈÉ®„Éá„Éº„Çø„Éô„Éº„ÇπÈÄ£Êê∫ (Supabase)\n- pyautoguiËá™ÂãïÊìç‰Ωú (Âõ∫ÂÆöÂ∫ßÊ®ô: X:1525, Y:1032)\n- GitHub CopilotÁµ±Âêà\n- „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ„ÉªÂøúÁ≠î\n\n## üéâ ÊàêÊûú\n„ÄåÂ§ñÈÉ®„Å®„Å§„Å™„Åå„Å£„Åü„Éº„ÉºÔΩó„Äç- Á§æÈï∑„Ç≥„É°„É≥„Éà\n\n## üìä „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ\n- ÂøúÁ≠îÊôÇÈñì: 5-10Áßí\n- ÊàêÂäüÁéá: 100%\n- Áõ£Ë¶ñÈñìÈöî: 4Áßí\n\n## üìÅ Èñ¢ÈÄ£„Éï„Ç°„Ç§„É´\n- pyautogui_copilot_chat.py\n- supabase_monitor.py\n- create_external_integration_issue.py" \
		--label "enhancement,automation,pyautogui,supabase,external-integration" \
		--repo "$(GITHUB_USER)/$(GITHUB_REPO)"
	@echo "‚úÖ GitHub Issue created successfully!"

gh-repo-status:
	@echo -e "$(COLOR_CYAN)GitHub Repository Status...$(COLOR_RESET)"
	@gh repo view "$(GITHUB_USER)/$(GITHUB_REPO)" || echo "‚ùå Repository not found"

gh-issue-list:
	@echo -e "$(COLOR_CYAN)Listing GitHub Issues...$(COLOR_RESET)"
	@gh issue list --repo "$(GITHUB_USER)/$(GITHUB_REPO)" --limit 10

gh-setup-complete:
	@echo -e "$(COLOR_CYAN)Complete GitHub CLI Setup for External Integration...$(COLOR_RESET)"
	@echo "Step 1: Authentication..."
	@make gh-auth
	@echo "Step 2: Repository check..."
	@make gh-repo-status
	@echo "Step 3: Create Issue..."
	@make gh-issue-external-integration
	@echo "Step 4: List Issues..."
	@make gh-issue-list
	@echo "üéâ GitHub CLI Setup Complete!"