#!/usr/bin/env python3
"""
üîß „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„Éª„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ
LaravelÈ¢®„ÅÆ„Çµ„Éº„Éì„ÇπÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†
"""

import os
import sys
import json
import time
import psutil
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
import sqlite3
import gradio as gr
from typing import Dict, List, Any
import asyncio
import aiohttp
import requests

class SystemMonitor:
    """„Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„ÇØ„É©„Çπ"""
    
    def __init__(self):
        self.base_dir = Path('/workspaces/AUTOCREATE')
        self.db_path = self.base_dir / 'database' / 'system_monitor.db'
        self.init_database()
        
    def init_database(self):
        """Áõ£Ë¶ñ„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ"""
        self.db_path.parent.mkdir(exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS system_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    component TEXT NOT NULL,
                    status TEXT NOT NULL,
                    message TEXT,
                    details TEXT,
                    cpu_usage REAL,
                    memory_usage REAL,
                    disk_usage REAL
                )
            ''')
            
            # „Çµ„Éº„Éì„ÇπÁõ£Ë¶ñ„ÉÜ„Éº„Éñ„É´
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS service_status (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    service_name TEXT NOT NULL,
                    status TEXT NOT NULL,
                    response_time REAL,
                    error_message TEXT
                )
            ''')
            
            conn.commit()
    
    def get_system_info(self) -> Dict[str, Any]:
        """„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±ÂèñÂæó"""
        try:
            # CPU‰ΩøÁî®Áéá
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # „É°„É¢„É™‰ΩøÁî®Áéá
            memory = psutil.virtual_memory()
            
            # „Éá„Ç£„Çπ„ÇØ‰ΩøÁî®Áéá
            disk = psutil.disk_usage('/')
            
            # „Éó„É≠„Çª„ÇπÊÉÖÂ†±
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_percent', 'cpu_percent']):
                try:
                    if proc.info['name'] == 'python' or proc.info['name'] == 'python3':
                        if proc.info['cmdline'] and any('asgi' in cmd or 'app.py' in cmd for cmd in proc.info['cmdline']):
                            python_processes.append({
                                'pid': proc.info['pid'],
                                'cmdline': ' '.join(proc.info['cmdline'][:3]),
                                'memory_percent': proc.info['memory_percent'],
                                'cpu_percent': proc.info['cpu_percent']
                            })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            return {
                'timestamp': datetime.now().isoformat(),
                'cpu': {
                    'usage_percent': cpu_percent,
                    'count': psutil.cpu_count()
                },
                'memory': {
                    'total': memory.total,
                    'used': memory.used,
                    'percent': memory.percent,
                    'available': memory.available
                },
                'disk': {
                    'total': disk.total,
                    'used': disk.used,
                    'percent': (disk.used / disk.total) * 100
                },
                'processes': python_processes
            }
        except Exception as e:
            return {'error': str(e)}
    
    def check_services(self) -> Dict[str, Any]:
        """„Çµ„Éº„Éì„ÇπÊ≠ªÊ¥ªÁõ£Ë¶ñ"""
        services = {
            'gradio_main': 'http://localhost:7860',
            'fastapi_main': 'http://localhost:8000',
            'gradio_root': 'http://localhost:7861',
        }
        
        results = {}
        
        for service_name, url in services.items():
            try:
                start_time = time.time()
                response = requests.get(url, timeout=5)
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    results[service_name] = {
                        'status': 'healthy',
                        'response_time': response_time,
                        'status_code': response.status_code
                    }
                else:
                    results[service_name] = {
                        'status': 'unhealthy',
                        'response_time': response_time,
                        'status_code': response.status_code
                    }
            except Exception as e:
                results[service_name] = {
                    'status': 'error',
                    'error': str(e),
                    'response_time': None
                }
        
        return results
    
    def check_databases(self) -> Dict[str, Any]:
        """„Éá„Éº„Çø„Éô„Éº„ÇπÁõ£Ë¶ñ"""
        databases = {
            'chat_history': self.base_dir / 'chat_history.db',
            'system_monitor': self.base_dir / 'database' / 'system_monitor.db',
            'github_issues': self.base_dir / 'database' / 'github_issues_automation.db'
        }
        
        results = {}
        
        for db_name, db_path in databases.items():
            try:
                if db_path.exists():
                    with sqlite3.connect(db_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                        tables = cursor.fetchall()
                        
                        # „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
                        cursor.execute("SELECT 1")
                        cursor.fetchone()
                        
                        results[db_name] = {
                            'status': 'healthy',
                            'tables_count': len(tables),
                            'size_mb': db_path.stat().st_size / (1024 * 1024)
                        }
                else:
                    results[db_name] = {
                        'status': 'missing',
                        'error': 'Database file not found'
                    }
            except Exception as e:
                results[db_name] = {
                    'status': 'error',
                    'error': str(e)
                }
        
        return results
    
    def check_gradio_interfaces(self) -> Dict[str, Any]:
        """Gradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÁõ£Ë¶ñ"""
        interfaces_dir = self.base_dir / 'app' / 'Http' / 'Controllers' / 'Gradio'
        
        results = {}
        
        if interfaces_dir.exists():
            for interface_dir in interfaces_dir.iterdir():
                if interface_dir.is_dir():
                    try:
                        # Python„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
                        python_files = list(interface_dir.glob('*.py'))
                        
                        if python_files:
                            results[interface_dir.name] = {
                                'status': 'available',
                                'files_count': len(python_files),
                                'files': [f.name for f in python_files]
                            }
                        else:
                            results[interface_dir.name] = {
                                'status': 'empty',
                                'files_count': 0
                            }
                    except Exception as e:
                        results[interface_dir.name] = {
                            'status': 'error',
                            'error': str(e)
                        }
        
        return results
    
    def log_system_status(self, system_info: Dict[str, Any], services: Dict[str, Any]):
        """„Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖã„Çí„É≠„Ç∞„Å´Ë®òÈå≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„É≠„Ç∞
                cursor.execute('''
                    INSERT INTO system_logs 
                    (component, status, message, details, cpu_usage, memory_usage, disk_usage)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    'system',
                    'healthy' if system_info.get('cpu', {}).get('usage_percent', 0) < 80 else 'warning',
                    'System monitoring',
                    json.dumps(system_info),
                    system_info.get('cpu', {}).get('usage_percent'),
                    system_info.get('memory', {}).get('percent'),
                    system_info.get('disk', {}).get('percent')
                ))
                
                # „Çµ„Éº„Éì„ÇπÁõ£Ë¶ñ„É≠„Ç∞
                for service_name, service_data in services.items():
                    cursor.execute('''
                        INSERT INTO service_status 
                        (service_name, status, response_time, error_message)
                        VALUES (?, ?, ?, ?)
                    ''', (
                        service_name,
                        service_data.get('status'),
                        service_data.get('response_time'),
                        service_data.get('error')
                    ))
                
                conn.commit()
        except Exception as e:
            print(f"Error logging system status: {e}")
    
    def get_system_dashboard(self) -> str:
        """„Ç∑„Çπ„ÉÜ„É†„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁîüÊàê"""
        try:
            # „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±ÂèñÂæó
            system_info = self.get_system_info()
            services = self.check_services()
            databases = self.check_databases()
            interfaces = self.check_gradio_interfaces()
            
            # „É≠„Ç∞„Å´Ë®òÈå≤
            self.log_system_status(system_info, services)
            
            # „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÁîüÊàê
            dashboard = f"""
# üîß „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
**Êõ¥Êñ∞ÊôÇÂàª**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üíª „Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖã
- **CPU‰ΩøÁî®Áéá**: {system_info.get('cpu', {}).get('usage_percent', 0):.1f}%
- **„É°„É¢„É™‰ΩøÁî®Áéá**: {system_info.get('memory', {}).get('percent', 0):.1f}%
- **„Éá„Ç£„Çπ„ÇØ‰ΩøÁî®Áéá**: {system_info.get('disk', {}).get('percent', 0):.1f}%

## üöÄ „Çµ„Éº„Éì„ÇπÁõ£Ë¶ñ
"""
            
            for service_name, service_data in services.items():
                status_emoji = {
                    'healthy': '‚úÖ',
                    'unhealthy': '‚ö†Ô∏è',
                    'error': '‚ùå'
                }.get(service_data.get('status'), '‚ùì')
                
                dashboard += f"- **{service_name}**: {status_emoji} {service_data.get('status', 'unknown')}"
                if service_data.get('response_time'):
                    dashboard += f" ({service_data.get('response_time', 0):.3f}s)"
                dashboard += "\n"
            
            dashboard += "\n## üíæ „Éá„Éº„Çø„Éô„Éº„ÇπÁõ£Ë¶ñ\n"
            for db_name, db_data in databases.items():
                status_emoji = {
                    'healthy': '‚úÖ',
                    'missing': '‚ö†Ô∏è',
                    'error': '‚ùå'
                }.get(db_data.get('status'), '‚ùì')
                
                dashboard += f"- **{db_name}**: {status_emoji} {db_data.get('status', 'unknown')}"
                if db_data.get('tables_count'):
                    dashboard += f" ({db_data.get('tables_count')}„ÉÜ„Éº„Éñ„É´)"
                dashboard += "\n"
            
            dashboard += "\n## üé® Gradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÁõ£Ë¶ñ\n"
            for interface_name, interface_data in interfaces.items():
                status_emoji = {
                    'available': '‚úÖ',
                    'empty': '‚ö†Ô∏è',
                    'error': '‚ùå'
                }.get(interface_data.get('status'), '‚ùì')
                
                dashboard += f"- **{interface_name}**: {status_emoji} {interface_data.get('status', 'unknown')}"
                if interface_data.get('files_count'):
                    dashboard += f" ({interface_data.get('files_count')}„Éï„Ç°„Ç§„É´)"
                dashboard += "\n"
            
            return dashboard
            
        except Exception as e:
            return f"‚ùå „Ç®„É©„Éº: {str(e)}"
    
    def get_historical_data(self, hours: int = 24) -> str:
        """Â±•Ê≠¥„Éá„Éº„ÇøÂèñÂæó"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # ÈÅéÂéª24ÊôÇÈñì„ÅÆ„Éá„Éº„Çø
                cursor.execute('''
                    SELECT timestamp, cpu_usage, memory_usage, disk_usage
                    FROM system_logs 
                    WHERE timestamp > datetime('now', '-{} hours')
                    ORDER BY timestamp DESC
                    LIMIT 100
                '''.format(hours))
                
                rows = cursor.fetchall()
                
                if not rows:
                    return "üìä Â±•Ê≠¥„Éá„Éº„Çø„Å™„Åó"
                
                report = f"üìä ÈÅéÂéª{hours}ÊôÇÈñì„ÅÆ„Ç∑„Çπ„ÉÜ„É†Â±•Ê≠¥\n\n"
                
                for row in rows:
                    timestamp, cpu, memory, disk = row
                    report += f"- **{timestamp}**: CPU {cpu:.1f}%, „É°„É¢„É™ {memory:.1f}%, „Éá„Ç£„Çπ„ÇØ {disk:.1f}%\n"
                
                return report
                
        except Exception as e:
            return f"‚ùå „Ç®„É©„Éº: {str(e)}"

# „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„Ç§„É≥„Çπ„Çø„É≥„Çπ
monitor = SystemMonitor()

def update_dashboard():
    """„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊõ¥Êñ∞"""
    return monitor.get_system_dashboard()

def get_historical_report():
    """Â±•Ê≠¥„É¨„Éù„Éº„ÉàÂèñÂæó"""
    return monitor.get_historical_data()

def restart_services():
    """„Çµ„Éº„Éì„ÇπÂÜçËµ∑Âãï"""
    try:
        # Á∞°Âçò„Å™ÂÜçËµ∑Âãï„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
        return "üîÑ „Çµ„Éº„Éì„ÇπÂÜçËµ∑Âãï„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü\nÔºàÂÆüÈöõ„ÅÆÂÜçËµ∑Âãï„ÅØÊâãÂãï„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ"
    except Exception as e:
        return f"‚ùå „Ç®„É©„Éº: {str(e)}"

# Gradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
with gr.Blocks(title="üîß „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ", theme=gr.themes.Soft()) as gradio_interface:
    gr.Markdown("# üîß „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„Éª„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ")
    
    with gr.Tab("üìä „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ"):
        dashboard_output = gr.Markdown(value=update_dashboard())
        
        with gr.Row():
            refresh_btn = gr.Button("üîÑ Êõ¥Êñ∞", variant="primary")
            restart_btn = gr.Button("üöÄ ÂÜçËµ∑Âãï", variant="secondary")
        
        refresh_btn.click(fn=update_dashboard, outputs=dashboard_output)
        restart_btn.click(fn=restart_services, outputs=gr.Textbox(label="ÂÜçËµ∑ÂãïÁµêÊûú"))
    
    with gr.Tab("üìà Â±•Ê≠¥„Éá„Éº„Çø"):
        historical_output = gr.Markdown(value=get_historical_report())
        
        refresh_history_btn = gr.Button("üìä Â±•Ê≠¥Êõ¥Êñ∞")
        refresh_history_btn.click(fn=get_historical_report, outputs=historical_output)
    
    with gr.Tab("‚öôÔ∏è Ë®≠ÂÆö"):
        gr.Markdown("""
        ## üîß Áõ£Ë¶ñË®≠ÂÆö
        - Áõ£Ë¶ñÈñìÈöî: 5ÂàÜ
        - „É≠„Ç∞‰øùÊåÅÊúüÈñì: 30Êó•
        - „Ç¢„É©„Éº„ÉàÈñæÂÄ§: CPU > 80%, „É°„É¢„É™ > 90%
        
        ## üìä „Éá„Éº„Çø„Éô„Éº„Çπ
        - Áõ£Ë¶ñ„Éá„Éº„Çø: `/database/system_monitor.db`
        - Ëá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó: ÊúâÂäπ
        """)

if __name__ == "__main__":
    print("üîß „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†„ÇíËµ∑Âãï‰∏≠...")
    gradio_interface.launch(server_name="0.0.0.0", server_port=7863)
