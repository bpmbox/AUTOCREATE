name: 🧪 Test Framework CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

jobs:
  test:
    name: 🔍 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🧪 Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: 🔗 Run integration tests
      run: |
        python -m pytest tests/integration/ -v
    
    - name: 🚀 Run performance tests
      run: |
        python -m pytest tests/performance/ -v --maxfail=1
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔧 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: 🎨 Check code formatting with Black
      run: black --check --diff src/ tests/
    
    - name: 📋 Check import sorting with isort
      run: isort --check-only --diff src/ tests/
    
    - name: 🔍 Lint with flake8
      run: flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 🔍 Type checking with mypy
      run: mypy src/ --ignore-missing-imports

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: 🔒 Run security scan with Bandit
      run: bandit -r src/ -f json -o bandit-report.json
    
    - name: 🛡️ Check for known vulnerabilities
      run: safety check --json --output safety-report.json

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔧 Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: 🏗️ Build package
      run: python -m build
    
    - name: ✅ Check package
      run: twine check dist/*
    
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  performance-benchmark:
    name: 🚀 Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🏃‍♂️ Run performance benchmarks
      run: |
        python scripts/run_benchmarks.py --output benchmarks.json
    
    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: benchmarks.json

  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔧 Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install -r requirements.txt
        pip install -e .
    
    - name: 📖 Build documentation
      run: |
        cd docs
        make html
    
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()
    
    steps:
    - name: 📨 Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🧪 Test Framework CI/CD Pipeline
          
          📊 Results:
          • Tests: ${{ needs.test.result }}
          • Lint: ${{ needs.lint.result }}
          • Security: ${{ needs.security.result }}
          • Build: ${{ needs.build.result }}
          
          🔗 Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
