AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AUTOCREATE AI Collaboration System - Serverless Deployment'

Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Runtime: python3.11
    Environment:
      Variables:
        GRADIO_SERVER_NAME: "0.0.0.0"
        GRADIO_SERVER_PORT: 7860
        PYTHONPATH: "/var/task"

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
    
  DomainName:
    Type: String
    Default: ""
    Description: Custom domain name (optional)

Resources:
  # メインのAUTOCREATEアプリケーション
  AutocreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "autocreate-app-${Environment}"
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DATABASE_URL: !Sub "postgresql://${DBUsername}:${DBPassword}@${AutocreateDatabase.Endpoint.Address}:5432/autocreate"
      VpcConfig:
        SecurityGroupIds:
          - !Ref AutocreateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        AutocreateApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref AutocreateApiGateway
        AutocreateRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref AutocreateApiGateway

  # API Gateway
  AutocreateApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "autocreate-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            "application/json": '{"message": "Resource not found"}'
        DEFAULT_5XX:
          ResponseTemplates:
            "application/json": '{"message": "Internal server error"}'

  # VPC設定
  AutocreateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "autocreate-vpc-${Environment}"

  # パブリックサブネット
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AutocreateVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "autocreate-public-subnet-1-${Environment}"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AutocreateVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "autocreate-public-subnet-2-${Environment}"

  # プライベートサブネット
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AutocreateVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "autocreate-private-subnet-1-${Environment}"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AutocreateVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "autocreate-private-subnet-2-${Environment}"

  # インターネットゲートウェイ
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "autocreate-igw-${Environment}"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AutocreateVPC
      InternetGatewayId: !Ref InternetGateway

  # ルートテーブル
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AutocreateVPC
      Tags:
        - Key: Name
          Value: !Sub "autocreate-public-rt-${Environment}"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # セキュリティグループ
  AutocreateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "autocreate-sg-${Environment}"
      GroupDescription: Security group for AUTOCREATE application
      VpcId: !Ref AutocreateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # RDS PostgreSQL データベース
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub "autocreate-db-subnet-group-${Environment}"
      DBSubnetGroupDescription: Subnet group for AUTOCREATE database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "autocreate-db-subnet-group-${Environment}"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "autocreate-db-sg-${Environment}"
      GroupDescription: Security group for AUTOCREATE database
      VpcId: !Ref AutocreateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AutocreateSecurityGroup

  DBUsername:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /autocreate/database/username
    NoEcho: true

  DBPassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /autocreate/database/password
    NoEcho: true

  AutocreateDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "autocreate-db-${Environment}"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.4"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: !If [IsProduction, true, false]
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "autocreate-db-${Environment}"

  # S3 バケット（ファイルストレージ）
  AutocreateS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "autocreate-storage-${Environment}-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # CloudFront Distribution（オプション）
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: HasCustomDomain
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: AutocreateApiOrigin
            DomainName: !Sub "${AutocreateApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: !Sub "/${Environment}"
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: AutocreateApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
        Enabled: true
        Comment: !Sub "AUTOCREATE CloudFront Distribution - ${Environment}"

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]

Outputs:
  AutocreateApiUrl:
    Description: "API Gateway endpoint URL for AUTOCREATE application"
    Value: !Sub "https://${AutocreateApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-AutocreateApiUrl"

  DatabaseEndpoint:
    Description: "RDS PostgreSQL endpoint"
    Value: !GetAtt AutocreateDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpoint"

  S3BucketName:
    Description: "S3 bucket name for file storage"
    Value: !Ref AutocreateS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"

  CloudFrontUrl:
    Description: "CloudFront distribution URL"
    Condition: HasCustomDomain
    Value: !Sub "https://${DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontUrl"
